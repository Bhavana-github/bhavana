{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "\n",
    "import sqlite3\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import nltk\n",
    "import string\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "\n",
    "import re\n",
    "# Tutorial about Python regular expressions: https://pymotw.com/2/re/\n",
    "import string\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "\n",
    "from gensim.models import Word2Vec\n",
    "from gensim.models import KeyedVectors\n",
    "import pickle\n",
    "\n",
    "from tqdm import tqdm\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "final1 = defaultdict(list)\n",
    "\n",
    "f=open('1.txt')\n",
    "for line in f:\n",
    "    final1['label'].append(int(line[-2]))\n",
    "    final1['Text'].append(line[:-3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "label2 =[]\n",
    "text2=[]\n",
    "f=open('2.txt')\n",
    "for line in f:\n",
    "    final1['label'].append(int(line[0]))\n",
    "    final1['Text'].append(line[2:])\n",
    "    \n",
    "final =  pd.DataFrame(final1)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>A very, very, very slow-moving, aimless movie ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Not sure who was more lost - the flat characte...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Attempting artiness with black &amp; white and cle...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Very little music or anything to speak of.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>The best scene in the movie was when Gerardo i...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Text  label\n",
       "0  A very, very, very slow-moving, aimless movie ...      0\n",
       "1  Not sure who was more lost - the flat characte...      0\n",
       "2  Attempting artiness with black & white and cle...      0\n",
       "3       Very little music or anything to speak of.        0\n",
       "4  The best scene in the movie was when Gerardo i...      1"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY4AAAD8CAYAAABgmUMCAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAEaVJREFUeJzt3X/QZmVdx/H3h10VSQN0N2NYajHXH2u/pA1pnMokESHBSg0nc3MYaYp+l4nWhGnMyPQDtdGSghEoRfyRborjrIg5NQEuYSQYsSnKrhSri5ChEPjtj/tafGbb3edccp/7fh6e92vmmT3nOtd9n++1u/DZc67rPneqCkmShjpo3gVIkpYXg0OS1MXgkCR1MTgkSV0MDklSF4NDktTF4JAkdTE4JEldDA5JUpfV8y5gDGvWrKn169fPuwxJWlauvfbaL1bV2sX6PSSDY/369Wzbtm3eZUjSspLkc0P6eatKktTF4JAkdTE4JEldDA5JUheDQ5LUxeCQJHUxOCRJXQwOSVIXg0OS1OUh+clxSZqn9Wd9cG7nvuX1J49+Dq84JEldDA5JUheDQ5LUxeCQJHUxOCRJXQwOSVIXg0OS1MXgkCR1MTgkSV0MDklSF4NDktTF4JAkdTE4JEldDA5JUheDQ5LUxeCQJHUxOCRJXUYPjiSrklyX5ANt/+gkVyfZnuSdSR7e2h/R9re34+sXvMerWvtNSZ4zds2SpP2bxRXHrwGfXrB/LnBeVT0BuAM4vbWfDtzR2s9r/UiyETgNeCpwIvCWJKtmULckaR9GDY4k64CTgb9q+wGeBby7dbkIeH7bPrXt044f3/qfClxaVfdU1WeB7cCxY9YtSdq/sa843gD8DvD1tv9Y4MtVdV/b3wEc2baPBG4FaMfvbP0faN/HayRJMzZacCT5CeD2qrp2rHPsdb4zkmxLsm3Xrl2zOKUkrUhjXnE8AzglyS3ApUxuUb0ROCzJ6tZnHbCzbe8EjgJoxw8FvrSwfR+veUBVnV9Vm6pq09q1a6c/GkkSMGJwVNWrqmpdVa1nMrn90ar6WeBK4AWt22bg/W17S9unHf9oVVVrP62tujoa2ABcM1bdkqQDW714l6l7JXBpkj8ErgMuaO0XAJck2Q7sZhI2VNUNSS4DbgTuA86sqvtnX7YkCWYUHFX1MeBjbfsz7GNVVFV9DXjhfl5/DnDOeBVKkobyk+OSpC4GhySpi8EhSepicEiSuhgckqQuBockqYvBIUnqYnBIkroYHJKkLgaHJKmLwSFJ6mJwSJK6GBySpC4GhySpi8EhSeoyjy9yWvLWn/XBuZz3ltefPJfzSlIPrzgkSV0MDklSF4NDktTF4JAkdTE4JEldDA5JUheDQ5LUxeCQJHUxOCRJXQwOSVIXg0OS1MXgkCR1MTgkSV0MDklSF4NDktTF4JAkdTE4JEldDA5JUheDQ5LUxeCQJHUxOCRJXUYLjiQHJ7kmyb8kuSHJH7T2o5NcnWR7kncmeXhrf0Tb396Or1/wXq9q7Tclec5YNUuSFjfmFcc9wLOq6vuA7wdOTHIccC5wXlU9AbgDOL31Px24o7Wf1/qRZCNwGvBU4ETgLUlWjVi3JOkARguOmvhK231Y+yngWcC7W/tFwPPb9qltn3b8+CRp7ZdW1T1V9VlgO3DsWHVLkg5s1DmOJKuSfBK4HdgK/Afw5aq6r3XZARzZto8EbgVox+8EHruwfR+vkSTN2KjBUVX3V9X3A+uYXCU8eaxzJTkjybYk23bt2jXWaSRpxZvJqqqq+jJwJfBDwGFJVrdD64CdbXsncBRAO34o8KWF7ft4zcJznF9Vm6pq09q1a0cZhyRp3FVVa5Mc1rYfCTwb+DSTAHlB67YZeH/b3tL2acc/WlXV2k9rq66OBjYA14xVtyTpwFYv3uWbdgRwUVsBdRBwWVV9IMmNwKVJ/hC4Drig9b8AuCTJdmA3k5VUVNUNSS4DbgTuA86sqvtHrFuSdACjBUdVXQ88bR/tn2Efq6Kq6mvAC/fzXucA50y7RklSPz85LknqMig4knzP2IVIkpaHoVccb2mPD/mlJIeOWpEkaUkbFBxV9cPAzzJZFnttkrcnefaolUmSlqTBcxxVdTPwe8ArgR8F3pTk35L81FjFSZKWnqFzHN+b5Dwmn8N4FvC8qnpK2z5vxPokSUvM0OW4fwb8FfDqqvrqnsaq+kKS3xulMknSkjQ0OE4Gvrrng3dJDgIOrqq7q+qS0aqTJC05Q+c4PgI8csH+Ia1NkrTCDA2Ogxd8twZt+5BxSpIkLWVDg+N/khyzZyfJDwBfPUB/SdJD1NA5jl8H3pXkC0CAbwd+ZrSqJElL1qDgqKpPJHky8KTWdFNV/e94ZUmSlqqep+P+ILC+veaYJFTVxaNUJUlasgYFR5JLgO8CPgns+S6MAgwOSVphhl5xbAI2tm/kkyStYENXVX2KyYS4JGmFG3rFsQa4Mck1wD17GqvqlFGqkiQtWUOD4zVjFiFJWj6GLsf9+yTfCWyoqo8kOQRYNW5pkqSlaOhj1V8OvBt4a2s6EnjfWEVJkpauoZPjZwLPAO6CB77U6dvGKkqStHQNDY57qurePTtJVjP5HIckaYUZGhx/n+TVwCPbd42/C/i78cqSJC1VQ4PjLGAX8K/ALwCXM/n+cUnSCjN0VdXXgb9sP5KkFWzos6o+yz7mNKrq8VOvSJK0pPU8q2qPg4EXAo+ZfjmSpKVu0BxHVX1pwc/OqnoDcPLItUmSlqCht6qOWbB7EJMrkJ7v8pAkPUQM/Z//nyzYvg+4BXjR1KuRJC15Q1dV/djYhUiSloeht6p+80DHq+pPp1OOJGmp61lV9YPAlrb/POAa4OYxipIkLV1Dg2MdcExV/TdAktcAH6yql4xVmCRpaRr6yJHHAfcu2L+3tUmSVpihVxwXA9ck+du2/3zgonFKkiQtZUNXVZ2T5EPAD7eml1XVdeOVJUlaqobeqgI4BLirqt4I7Ehy9IE6JzkqyZVJbkxyQ5Jfa+2PSbI1yc3t18Nbe5K8Kcn2JNcv/NBhks2t/81JNn8T45QkTcnQr449G3gl8KrW9DDgrxd52X3Ab1XVRuA44MwkG5k8ov2KqtoAXNH2AZ4LbGg/ZwB/3s79GOBs4OnAscDZe8JGkjR7Q684fhI4BfgfgKr6AvDoA72gqm6rqn9u2/8NfJrJd5WfyjfmRy5iMl9Ca7+4Jq4CDktyBPAcYGtV7a6qO4CtwIkD65YkTdnQ4Li3qor2aPUk39JzkiTrgacBVwOPq6rb2qH/5Burs44Ebl3wsh2tbX/te5/jjCTbkmzbtWtXT3mSpA5Dg+OyJG9lchXwcuAjDPxSpySPAt4D/HpV3bXw2MIwerCq6vyq2lRVm9auXTuNt5Qk7cPQVVV/3L5r/C7gScDvV9XWxV6X5GFMQuNvquq9rfm/khxRVbe1W1G3t/adwFELXr6ute0EnrlX+8eG1C1Jmr5FrziSrEpyZVVtrapXVNVvDwyNABcAn97rWVZbgD0rozYD71/Q/tK2uuo44M52S+vDwAlJDm+T4ie0NknSHCx6xVFV9yf5epJDq+rOjvd+BvBzwL8m+WRrezXweia3vk4HPsc3Hs9+OXASsB24G3hZO//uJK8DPtH6vbaqdnfUIUmaoqGfHP8KkwDYSltZBVBVv7q/F1TVPwDZz+Hj99G/gDP3814XAhcOrFWSNKKhwfHe9iNJWuEOGBxJvqOqPl9VPpdKkgQsPjn+vj0bSd4zci2SpGVgseBYOEfx+DELkSQtD4sFR+1nW5K0Qi02Of59Se5icuXxyLZN26+q+tZRq5MkLTkHDI6qWjWrQiRJy0PP93FIkmRwSJL6GBySpC4GhySpi8EhSepicEiSuhgckqQuBockqYvBIUnqYnBIkroYHJKkLgaHJKmLwSFJ6mJwSJK6GBySpC4GhySpi8EhSepicEiSuhgckqQuBockqYvBIUnqYnBIkroYHJKkLgaHJKmLwSFJ6mJwSJK6GBySpC4GhySpi8EhSepicEiSuowWHEkuTHJ7kk8taHtMkq1Jbm6/Ht7ak+RNSbYnuT7JMQtes7n1vznJ5rHqlSQNM+YVx9uAE/dqOwu4oqo2AFe0fYDnAhvazxnAn8MkaICzgacDxwJn7wkbSdJ8jBYcVfVxYPdezacCF7Xti4DnL2i/uCauAg5LcgTwHGBrVe2uqjuArfz/MJIkzdCs5zgeV1W3te3/BB7Xto8Ebl3Qb0dr21+7JGlO5jY5XlUF1LTeL8kZSbYl2bZr165pva0kaS+zDo7/aregaL/e3tp3Akct6Leute2v/f+pqvOralNVbVq7du3UC5ckTcw6OLYAe1ZGbQbev6D9pW111XHAne2W1oeBE5Ic3ibFT2htkqQ5WT3WGyd5B/BMYE2SHUxWR70euCzJ6cDngBe17pcDJwHbgbuBlwFU1e4krwM+0fq9tqr2nnCXJM3QaMFRVS/ez6Hj99G3gDP38z4XAhdOsTRJ0oPgJ8clSV0MDklSF4NDktTF4JAkdTE4JEldDA5JUheDQ5LUxeCQJHUxOCRJXQwOSVIXg0OS1MXgkCR1MTgkSV0MDklSF4NDktTF4JAkdTE4JEldDA5JUheDQ5LUxeCQJHUxOCRJXQwOSVIXg0OS1MXgkCR1MTgkSV0MDklSF4NDktTF4JAkdTE4JEldDA5JUheDQ5LUxeCQJHUxOCRJXQwOSVIXg0OS1MXgkCR1MTgkSV2WTXAkOTHJTUm2Jzlr3vVI0kq1LIIjySrgzcBzgY3Ai5NsnG9VkrQyLYvgAI4FtlfVZ6rqXuBS4NQ51yRJK9JyCY4jgVsX7O9obZKkGVs97wKmJckZwBlt9ytJbnoQb7cG+OKDr6pPzp31GR8wl/HOmWNeGVbcmHPugxrzdw7ptFyCYydw1IL9da3tAVV1PnD+NE6WZFtVbZrGey0HK2284JhXCsc8juVyq+oTwIYkRyd5OHAasGXONUnSirQsrjiq6r4kvwx8GFgFXFhVN8y5LElakZZFcABU1eXA5TM63VRueS0jK2284JhXCsc8glTV2OeQJD2ELJc5DknSErFig2OxR5gkeUSSd7bjVydZP/sqp2vAmH8zyY1Jrk9yRZJBS/OWsqGPqkny00kqybJfgTNkzEle1P6sb0jy9lnXOG0D/m5/R5Irk1zX/n6fNI86pyXJhUluT/Kp/RxPkje134/rkxwz1QKqasX9MJlg/w/g8cDDgX8BNu7V55eAv2jbpwHvnHfdMxjzjwGHtO1fXAljbv0eDXwcuArYNO+6Z/DnvAG4Dji87X/bvOuewZjPB36xbW8Ebpl33Q9yzD8CHAN8aj/HTwI+BAQ4Drh6mudfqVccQx5hcipwUdt+N3B8ksywxmlbdMxVdWVV3d12r2LyeZnlbOijal4HnAt8bZbFjWTImF8OvLmq7gCoqttnXOO0DRlzAd/atg8FvjDD+qauqj4O7D5Al1OBi2viKuCwJEdM6/wrNTiGPMLkgT5VdR9wJ/DYmVQ3jt7HtpzO5F8sy9miY26X8EdV1QdnWdiIhvw5PxF4YpJ/THJVkhNnVt04hoz5NcBLkuxgsjrzV2ZT2tyM+pimZbMcV7OT5CXAJuBH513LmJIcBPwp8PNzLmXWVjO5XfVMJleVH0/yPVX15blWNa4XA2+rqj9J8kPAJUm+u6q+Pu/ClqOVesWx6CNMFvZJsprJ5e2XZlLdOIaMmSQ/DvwucEpV3TOj2say2JgfDXw38LEktzC5F7xlmU+QD/lz3gFsqar/rarPAv/OJEiWqyFjPh24DKCq/gk4mMlzrB6qBv33/s1aqcEx5BEmW4DNbfsFwEerzTotU4uOOcnTgLcyCY3lft8bFhlzVd1ZVWuqan1VrWcyr3NKVW2bT7lTMeTv9vuYXG2QZA2TW1efmWWRUzZkzJ8HjgdI8hQmwbFrplXO1hbgpW111XHAnVV127TefEXeqqr9PMIkyWuBbVW1BbiAyeXsdiaTUKfNr+IHb+CY/wh4FPCutg7g81V1ytyKfpAGjvkhZeCYPwyckORG4H7gFVW1bK+mB475t4C/TPIbTCbKf345/0MwyTuYhP+aNm9zNvAwgKr6CybzOCcB24G7gZdN9fzL+PdOkjQHK/VWlSTpm2RwSJK6GBySpC4GhySpi8EhSepicEiSuhgckqQuBockqcv/ATi+GOy7D3FBAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#data set is balance or not \n",
    "final['label'].astype(int).plot.hist();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A very, very, very slow-moving, aimless movie about a distressed, drifting young man.  \n",
      "==================================================\n",
      "the da vinci code is awesome!\n",
      "\n",
      "==================================================\n",
      "Love luv lubb the Da Vinci Code!\n",
      "\n",
      "==================================================\n",
      "Brokeback Mountain was so awesome.\n",
      "\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "# printing some random reviews\n",
    "sent_0 = final['Text'].values[0]\n",
    "print(sent_0)\n",
    "print(\"=\"*50)\n",
    "\n",
    "sent_1000 = final['Text'].values[1000]\n",
    "print(sent_1000)\n",
    "print(\"=\"*50)\n",
    "\n",
    "sent_1500 = final['Text'].values[1500]\n",
    "print(sent_1500)\n",
    "print(\"=\"*50)\n",
    "\n",
    "sent_4900 = final['Text'].values[4900]\n",
    "print(sent_4900)\n",
    "print(\"=\"*50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A very, very, very slow-moving, aimless movie about a distressed, drifting young man.  \n"
     ]
    }
   ],
   "source": [
    "# remove urls from text python: https://stackoverflow.com/a/40823105/4084039\n",
    "sent_0 = re.sub(r\"http\\S+\", \"\", sent_0)\n",
    "sent_1000 = re.sub(r\"http\\S+\", \"\", sent_1000)\n",
    "sent_150 = re.sub(r\"http\\S+\", \"\", sent_1500)\n",
    "sent_4900 = re.sub(r\"http\\S+\", \"\", sent_4900)\n",
    "\n",
    "print(sent_0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A very, very, very slow-moving, aimless movie about a distressed, drifting young man.  \n",
      "==================================================\n",
      "the da vinci code is awesome!\n",
      "\n",
      "==================================================\n",
      "Love luv lubb the Da Vinci Code!\n",
      "\n",
      "==================================================\n",
      "Brokeback Mountain was so awesome.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# https://stackoverflow.com/questions/16206380/python-beautifulsoup-how-to-remove-all-tags-from-an-element\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "soup = BeautifulSoup(sent_0, 'lxml')\n",
    "text = soup.get_text()\n",
    "print(text)\n",
    "print(\"=\"*50)\n",
    "\n",
    "soup = BeautifulSoup(sent_1000, 'lxml')\n",
    "text = soup.get_text()\n",
    "print(text)\n",
    "print(\"=\"*50)\n",
    "\n",
    "soup = BeautifulSoup(sent_1500, 'lxml')\n",
    "text = soup.get_text()\n",
    "print(text)\n",
    "print(\"=\"*50)\n",
    "\n",
    "soup = BeautifulSoup(sent_4900, 'lxml')\n",
    "text = soup.get_text()\n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://stackoverflow.com/a/47091490/4084039\n",
    "import re\n",
    "\n",
    "def decontracted(phrase):\n",
    "    # specific\n",
    "    phrase = re.sub(r\"won't\", \"will not\", phrase)\n",
    "    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n",
    "\n",
    "    # general\n",
    "    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n",
    "    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n",
    "    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n",
    "    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n",
    "    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n",
    "    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n",
    "    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n",
    "    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n",
    "    return phrase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Brokeback Mountain was so awesome.\n",
      "\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "sent_4900 = decontracted(sent_4900)\n",
    "print(sent_4900)\n",
    "print(\"=\"*50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A very, very, very slow-moving, aimless movie about a distressed, drifting young man.\n"
     ]
    }
   ],
   "source": [
    "#remove words with numbers python: https://stackoverflow.com/a/18082370/4084039\n",
    "sent_0 = re.sub(\"\\S*\\d\\S*\", \"\", sent_0).strip()\n",
    "print(sent_0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A very very very slow moving aimless movie about a distressed drifting young man \n"
     ]
    }
   ],
   "source": [
    "#remove spacial character: https://stackoverflow.com/a/5843547/4084039\n",
    "sent_0 = re.sub('[^A-Za-z0-9]+', ' ', sent_0)\n",
    "print(sent_0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://gist.github.com/sebleier/554280\n",
    "# we are removing the words from the stop words list: 'no', 'nor', 'not'\n",
    "# <br /><br /> ==> after the above steps, we are getting \"br br\"\n",
    "# we are including them into stop words list\n",
    "# instead of <br /> if we have <br/> these tags would have revmoved in the 1st step\n",
    "\n",
    "stopwords= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n",
    "            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n",
    "            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n",
    "            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n",
    "            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n",
    "            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n",
    "            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n",
    "            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n",
    "            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n",
    "            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n",
    "            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n",
    "            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n",
    "            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n",
    "            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n",
    "            'won', \"won't\", 'wouldn', \"wouldn't\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 8038/8038 [00:02<00:00, 3858.57it/s]\n"
     ]
    }
   ],
   "source": [
    "# Combining all the above stundents \n",
    "from tqdm import tqdm\n",
    "preprocessed = []\n",
    "# tqdm is for printing the status bar\n",
    "for sentance in tqdm(final['Text'].values):\n",
    "    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n",
    "    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n",
    "    sentance = decontracted(sentance)\n",
    "    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n",
    "    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n",
    "    # https://gist.github.com/sebleier/554280\n",
    "    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stopwords)\n",
    "    preprocessed.append(sentance.strip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'love luv lubb da vinci code'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preprocessed[1500]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Featurization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "some feature names  ['aailiyah', 'aaron', 'abandoned', 'ability', 'able', 'abortion', 'abrams', 'abroad', 'absolute', 'absolutely']\n",
      "==================================================\n",
      "the type of count vectorizer  <class 'scipy.sparse.csr.csr_matrix'>\n",
      "the shape of out text BOW vectorizer  (8038, 3975)\n",
      "the number of unique words  3975\n"
     ]
    }
   ],
   "source": [
    "#BoW\n",
    "count_vect = CountVectorizer() #in scikit-learn\n",
    "count_vect.fit(preprocessed)\n",
    "print(\"some feature names \", count_vect.get_feature_names()[:10])\n",
    "print('='*50)\n",
    "\n",
    "final_counts = count_vect.transform(preprocessed)\n",
    "print(\"the type of count vectorizer \",type(final_counts))\n",
    "print(\"the shape of out text BOW vectorizer \",final_counts.get_shape())\n",
    "print(\"the number of unique words \", final_counts.get_shape()[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "some sample features(unique words in the corpus) ['absolutely', 'absolutely awesome', 'absolutely love', 'acceptable', 'aching', 'aching cock', 'acne', 'acne love', 'acting', 'action']\n",
      "==================================================\n",
      "the type of count vectorizer  <class 'scipy.sparse.csr.csr_matrix'>\n",
      "the shape of out text TFIDF vectorizer  (8038, 655)\n",
      "the number of unique words including both unigrams and bigrams  655\n"
     ]
    }
   ],
   "source": [
    "#tfidf\n",
    "tf_idf_vect = TfidfVectorizer(ngram_range=(1,2), min_df=10)\n",
    "tf_idf_vect.fit(preprocessed)\n",
    "print(\"some sample features(unique words in the corpus)\",tf_idf_vect.get_feature_names()[0:10])\n",
    "print('='*50)\n",
    "\n",
    "final_tf_idf = tf_idf_vect.transform(preprocessed)\n",
    "print(\"the type of count vectorizer \",type(final_tf_idf))\n",
    "print(\"the shape of out text TFIDF vectorizer \",final_tf_idf.get_shape())\n",
    "print(\"the number of unique words including both unigrams and bigrams \", final_tf_idf.get_shape()[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Word2Vec "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train your own Word2Vec model using your own text corpus\n",
    "i=0\n",
    "list_of_sentance=[]\n",
    "for sentance in preprocessed:\n",
    "    list_of_sentance.append(sentance.split())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('homosexuality', 0.9947419166564941), ('either', 0.9937832951545715), ('becoming', 0.9877654314041138), ('acceptable', 0.9784659743309021), ('think', 0.9190821051597595), ('brokeback', 0.8539977669715881), ('mountain', 0.8426125645637512), ('beautiful', 0.8298031091690063), ('horrible', 0.8289213180541992), ('anyway', 0.8279935121536255)]\n",
      "==================================================\n",
      "[('every', 0.9977586269378662), ('performance', 0.9976140260696411), ('little', 0.9973092675209045), ('john', 0.997264564037323), ('half', 0.9972462058067322), ('kids', 0.9971147775650024), ('playing', 0.9970337748527527), ('end', 0.9968582987785339), ('family', 0.9968501925468445), ('come', 0.9968061447143555)]\n"
     ]
    }
   ],
   "source": [
    "# Using Google News Word2Vectors\n",
    "\n",
    "# in this project we are using a pretrained model by google\n",
    "# its 3.3G file, once you load this into your memory \n",
    "# it occupies ~9Gb, so please do this step only if you have >12G of ram\n",
    "# we will provide a pickle file wich contains a dict , \n",
    "# and it contains all our courpus words as keys and  model[word] as values\n",
    "# To use this code-snippet, download \"GoogleNews-vectors-negative300.bin\" \n",
    "# from https://drive.google.com/file/d/0B7XkCwpI5KDYNlNUTTlSS21pQmM/edit\n",
    "# it's 1.9GB in size.\n",
    "\n",
    "\n",
    "# http://kavita-ganesan.com/gensim-word2vec-tutorial-starter-code/#.W17SRFAzZPY\n",
    "# you can comment this whole cell\n",
    "# or change these varible according to your need\n",
    "\n",
    "is_your_ram_gt_16g=False\n",
    "want_to_use_google_w2v = False\n",
    "want_to_train_w2v = True\n",
    "\n",
    "if want_to_train_w2v:\n",
    "    # min_count = 5 considers only words that occured atleast 5 times\n",
    "    w2v_model=Word2Vec(list_of_sentance,min_count=5,size=50, workers=4)\n",
    "    print(w2v_model.wv.most_similar('great'))\n",
    "    print('='*50)\n",
    "    print(w2v_model.wv.most_similar('worst'))\n",
    "    \n",
    "elif want_to_use_google_w2v and is_your_ram_gt_16g:\n",
    "    if os.path.isfile('GoogleNews-vectors-negative300.bin'):\n",
    "        w2v_model=KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin', binary=True)\n",
    "        print(w2v_model.wv.most_similar('great'))\n",
    "        print(w2v_model.wv.most_similar('worst'))\n",
    "    else:\n",
    "        print(\"you don't have gogole's word2vec file, keep want_to_train_w2v = True, to train your own w2v \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of words that occured minimum 5 times  600\n",
      "sample words  ['real', 'girl', 'suspense', 'wotshisface', 'begin', 'impossible', 'racism', 'make', 'stand', 'week', 'solid', 'nothing', 'kids', 'full', 'talking', 'lacks', 'iii', 'whimpering', 'felt', 'likes', 'hell', 'differently', 'together', 'friday', 'mission', 'keys', 'demons', 'mtv', 'guess', 'blonds', 'interesting', 'half', 'awards', 'consider', 'mean', 'art', 'john', 'place', 'character', 'came', 'piece', 'no', 'looking', 'mention', 'fan', 'case', 'kinda', 'turned', 'day', 'hoot']\n"
     ]
    }
   ],
   "source": [
    "w2v_words = list(w2v_model.wv.vocab)\n",
    "print(\"number of words that occured minimum 5 times \",len(w2v_words))\n",
    "print(\"sample words \", w2v_words[0:50])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 8038/8038 [00:00<00:00, 13296.18it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8038\n",
      "50\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# average Word2Vec\n",
    "# compute average word2vec for each review.\n",
    "sent_vectors = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sent in tqdm(list_of_sentance): # for each review/sentence\n",
    "    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n",
    "    cnt_words =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sent: # for each word in a review/sentence\n",
    "        if word in w2v_words:\n",
    "            vec = w2v_model.wv[word]\n",
    "            sent_vec += vec\n",
    "            cnt_words += 1\n",
    "    if cnt_words != 0:\n",
    "        sent_vec /= cnt_words\n",
    "    sent_vectors.append(sent_vec)\n",
    "print(len(sent_vectors))\n",
    "print(len(sent_vectors[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 8038/8038 [00:02<00:00, 2965.50it/s]\n"
     ]
    }
   ],
   "source": [
    "# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\n",
    "model = TfidfVectorizer()\n",
    "tf_idf_matrix = model.fit_transform(preprocessed)\n",
    "# we are converting a dictionary with word as a key, and the idf as a value\n",
    "dictionary = dict(zip(model.get_feature_names(), list(model.idf_)))\n",
    "\n",
    "# TF-IDF weighted Word2Vec\n",
    "tfidf_feat = model.get_feature_names() # tfidf words/col-names\n",
    "# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n",
    "\n",
    "tfidf_sent_vectors = []; # the tfidf-w2v for each sentence/review is stored in this list\n",
    "row=0;\n",
    "for sent in tqdm(list_of_sentance): # for each review/sentence \n",
    "    sent_vec = np.zeros(50) # as word vectors are of zero length\n",
    "    weight_sum =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sent: # for each word in a review/sentence\n",
    "        if word in w2v_words and word in tfidf_feat:\n",
    "            vec = w2v_model.wv[word]\n",
    "#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n",
    "            # to reduce the computation we are \n",
    "            # dictionary[word] = idf value of word in whole courpus\n",
    "            # sent.count(word) = tf valeus of word in this review\n",
    "            tf_idf = dictionary[word]*(sent.count(word)/len(sent))\n",
    "            sent_vec += (vec * tf_idf)\n",
    "            weight_sum += tf_idf\n",
    "    if weight_sum != 0:\n",
    "        sent_vec /= weight_sum\n",
    "    tfidf_sent_vectors.append(sent_vec)\n",
    "    row += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## split data into train and test for BoW  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Please write all the code with proper documentation\n",
    "# Please write all the code with proper documentation\n",
    "# Please write all the code with proper documentation\n",
    "X = preprocessed\n",
    "Y = final['label']\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, shuffle=Flase)# this is for time series split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2) # this is random splitting\n",
    "#X_train, X_cv, y_train, y_cv = train_test_split(X_train, y_train, test_size=0.33) # this is random splitting\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "vectorizer = CountVectorizer()\n",
    "vectorizer.fit(X_train) # fit has to happen only on train data\n",
    "\n",
    "# we use the fitted CountVectorizer to convert the text to vector\n",
    "X_train_bow = vectorizer.transform(X_train)\n",
    "#X_cv_bow = vectorizer.transform(X_cv)\n",
    "X_test_bow = vectorizer.transform(X_test)\n",
    "\n",
    "# Please write all the code with proper documentation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NaiveBayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=MultinomialNB(alpha=1.0, class_prior=None,\n",
       "                                     fit_prior=True),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000,\n",
       "                                   10000]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import matplotlib.pyplot as plt\n",
    "#import GridSearchCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid ={\"alpha\" : [ 10**-4, 10**-3, 10**-2, 10**-1, 10**-0, 10**1, 10**2, 10**3, 10**4]}\n",
    "clf = MultinomialNB(class_prior=None)\n",
    "#clf = RandomForestClassifier(random_state=0)\n",
    "clf_cv_NB_BoW= GridSearchCV(clf,param_grid,cv=5)\n",
    "clf_cv_NB_BoW.fit(X_train_bow,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'alpha': 0.1}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_alpha = clf_cv_NB_BoW.best_params_\n",
    "best_alpha"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Testing with Test data\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "best_alpha = 0.1\n",
    "clf_NB_BoW = MultinomialNB(alpha=best_alpha, class_prior=None)\n",
    "clf_NB_BoW.fit(X_train_bow, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "train_fpr, train_tpr, thresholds = roc_curve(y_train, clf_NB_BoW.predict_proba(X_train_bow)[:,1])\n",
    "test_fpr, test_tpr, thresholds = roc_curve(y_test, clf_NB_BoW.predict_proba(X_test_bow)[:,1])\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"alpha: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.show()\n",
    "\n",
    "print(\"=\"*100)\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "print(\"Train confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_train, clf_NB_BoW.predict(X_train_bow))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Test confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_test, clf_NB_BoW.predict(X_test_bow))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=LogisticRegression(C=1.0, class_weight=None, dual=False,\n",
       "                                          fit_intercept=True,\n",
       "                                          intercept_scaling=1, l1_ratio=None,\n",
       "                                          max_iter=100,\n",
       "                                          multi_class='multinomial',\n",
       "                                          n_jobs=None, penalty='l1',\n",
       "                                          random_state=0, solver='saga',\n",
       "                                          tol=0.0001, verbose=0,\n",
       "                                          warm_start=False),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'C': [1, 0.1, 0.01, 0.001, 0.0001]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import matplotlib.pyplot as plt\n",
    "#import GridSearchCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid ={\"C\" : [1, 0.1, 0.01, 0.001, 0.0001]}\n",
    "clf = LogisticRegression(penalty='l1', random_state=0, solver='saga',multi_class='multinomial')\n",
    "#clf = RandomForestClassifier(random_state=0)\n",
    "clf_cv_LR_BoW= GridSearchCV(clf,param_grid,cv=5)\n",
    "clf_cv_LR_BoW.fit(X_train_bow,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 1}"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_cv_LR_BoW.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Testing with Test data\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "best_C = 1\n",
    "clf_LR_BoW = LogisticRegression(penalty='l1', C=best_C, random_state=0, solver='saga',multi_class='multinomial')\n",
    "clf_LR_BoW.fit(X_train_bow, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "train_fpr, train_tpr, thresholds = roc_curve(y_train, clf_LR_BoW.predict_proba(X_train_bow)[:,1])\n",
    "test_fpr, test_tpr, thresholds = roc_curve(y_test, clf_LR_BoW.predict_proba(X_test_bow)[:,1])\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"C: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.show()\n",
    "\n",
    "print(\"=\"*100)\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "print(\"Train confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_train, clf_LR_BoW.predict(X_train_bow))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Test confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_test, clf_LR_BoW.predict(X_test_bow))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=RandomForestClassifier(bootstrap=True, class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features='auto',\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              n_estimators='warn', n_jobs=None,\n",
       "                                              oob_score=False, random_state=0,\n",
       "                                              verbose=0, warm_start=False),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'max_depth': [10, 50, 100, 500, 1000, 1500, 10000],\n",
       "                         'n_estimators': [20, 40, 60, 70, 80, 90, 100]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "#import GridSearchCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = {'max_depth': [10, 50, 100, 500, 1000, 1500, 10000], 'n_estimators': [20, 40, 60, 70, 80, 90, 100]}\n",
    "clf = RandomForestClassifier(random_state=0)\n",
    "clf_cv_RF_BoW= GridSearchCV(clf,param_grid,cv=5)\n",
    "clf_cv_RF_BoW.fit(X_train_bow,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_depth_list = list(clf_cv_RF_BoW.cv_results_['param_max_depth'].data)\n",
    "estimators_list = list(clf_cv_RF_BoW.cv_results_['param_n_estimators'].data)\n",
    "data = pd.DataFrame(data={'Estimators':estimators_list, 'Max Depth':max_depth_list, 'AUC':clf_cv_RF_BoW.cv_results_['mean_test_score']})\n",
    "data = data.pivot(index='Estimators', columns='Max Depth', values='AUC')\n",
    "sns.heatmap(data, annot=True, cmap=\"YlGnBu\").set_title('AUC for Test data')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 500, 'n_estimators': 70}"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_cv_RF_BoW.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWcAAAD8CAYAAACrbmW5AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAFkFJREFUeJzt3XmYVNWZx/Hv282+KK2AbK2AEAluqAi4TVASQBNDHBNG4ggxZto46KhjNG6jjwsTowmKM5iRCQg6iBIzPqLpBInRaJ4RARVFaJVGRLoBiTb72lX1zh91wQr2Ui3VXaevv4/Pebx17q265yi+z+t7z73X3B0REQlLQb4HICIin6fgLCISIAVnEZEAKTiLiARIwVlEJEAKziIiAVJwFhEJkIKziEiAFJxFRALUorFPsOuRG3QLonxOx8tn53sIEqDE3ko72N+o/uSDrGNOy859D/p8jUWZs4hIgBo9cxYRaVKpZL5HkBMKziISL8lEvkeQEwrOIhIr7ql8DyEnFJxFJF5SCs4iIuFR5iwiEiBdEBQRCZAyZxGR8LhWa4iIBEgXBEVEAqSyhohIgHRBUEQkQMqcRUQCpAuCIiIB0gVBEZHwuKvmLCISHtWcRUQCpLKGiEiAlDmLiAQoWZ3vEeSEgrOIxIvKGiIiAVJZQ0QkQMqcRUQCpOAsIhIe1wVBEZEAqeYsIhIglTVERAKkzFlEJEDKnEVEAhSTzLkg3wMQEcmpRCL7Vgcza2Nmi8zsLTNbbmZ3RP19zOw1Mys3syfNrFXU3zr6XB7t753xWzdF/e+Z2ahspqHgLCLx4qnsW932AOe4+4nAIGC0mQ0Dfg7c7+79gE3AZdHxlwGbov77o+Mws4HARcCxwGjgITMrrO/kCs4iEi+pVPatDp62PfrYMmoOnAM8FfXPAr4TbY+JPhPtH2FmFvU/4e573H01UA4MqW8aCs4iEi+5y5wxs0IzWwpsBBYAq4DN7r6vJlIB9Iy2ewJrAaL9W4DDM/tr+E6tFJxFJF4akDmbWYmZLcloJZk/5e5Jdx8E9CKd7Q5oqmlotYaIxEsDVmu4+zRgWhbHbTazF4HTgE5m1iLKjnsBldFhlUAxUGFmLYBDgU8z+vfJ/E6tlDmLSLzkbrVGFzPrFG23Bb4BlAEvAt+NDpsAPBNtz4s+E+3/k7t71H9RtJqjD9AfWFTfNJQ5i0i8uOfql7oDs6KVFQXAXHd/zsxWAE+Y2d3Am8D06PjpwGNmVg5UkV6hgbsvN7O5wAogAUz0LF4RruAsIvGSozsE3f1t4KQa+j+ghtUW7r4b+F4tvzUJmNSQ8ys4i0i86PZtEZEAxeT2bQVnEYmXZL3l3GZBwVlE4kVlDRGRACk4i4gESDVnEZHweCpn65zzSsFZROJFZQ0RkQBptYaISICUOcuGrbu49bk3qNqxG8y48MSjuPjUo3n34y1Mmv8WexJJWhQYN408keN7FAGweM0n3PfCMhIpp6htK6ZffOb+30umnO/P/DNdO7bhP743LF/TkiY0auRwJk++k8KCAmY8Mod775ua7yE1fwrOUlhgXHfOsXy1Wyd27Klm3Mw/M6xPFx54cTmXn3EMZx59BK+s+pgHXlzO9IvPZOvuan72/FtMHXsa3Q9tR9WOPX/ze48vWUWfzh3Ysafup2VJPBQUFPDglEmMPm8cFRXrWfhqKc8+9zxlZSvzPbTmLXcPPsqreoOzmQ0g/ZqVfU/urwTmuXtZYw6sOejSoQ1dOrQBoH3rlvQ9vCMbt+3GDHbsTQfY7Xuq6dIxfczvV1RwzjE96H5oOwAOa996/299vHUXr6z6mB+d9hUeW7yqiWci+TDk1JNYtepDVq/+CIC5c5/h2+ePUnA+WF+GzNnMfgqMA57gs+eP9gLmmNkT7n5PI4+v2ajcvJN3N27h+B5FXD/ieP557qtM/tM7pBxmXXIWAGuqtpNIpbhs9l/YuTfB9wf35fzjjwTgvheWcc3Zxypr/hLp0bMbayvW7f9cUbmeIad+7iFo0lBfkqV0lwHHunt1ZqeZTQaWAwrOwM69CX7y9CKuH3EcHVq3ZOrLZfzknOP4+oAezC+r5I7SN3l43BkkU07Zhi1Mu+h0dieSjH/sFU7oeRhrqrZT1K41A7t1YvGaT/I9HZHmLSarNep7E0oK6FFDf/doX40y38s1/aW3DmZ8watOprju6UWcd2wvRhyT/kf17DtrGXFMdwBGDujBO+s3A3BExzac1qcrbVu1oKhda04pPpz3Nm5haUUVfy7fwLkPPc+N85aweM0n3Pzs63mbkzSNdZUbKO712X9evXp2Z926DXkcUTx4KpV1C1l9mfM1wAtmtpLP3h57JNAPuLK2L2W+l2vXIzfE4/8xauDu3FH6Jn0O78glQ/rt7+/SoQ1LPvqUU4/qzKI1n3BkUXsAhvfvzj0L3iaRSlGdTLFs3Sb+8dSjGTmgJ/8yfCCQXs3x6KJy/v38U/IyJ2k6i5cspV+/PvTuXUxl5QbGjh3DJeMn5ntYzd+Xoazh7n8ws6+Qfup/5gXBxdm8ZiXullZU8dzyCvp3OYSxM14E4KqvDeS20YO494/LSKacVi0K+LdzBwHQt3NHTu/blbHTX8TMuODEo+jX5ZB8TkHyKJlMcvU1t1L6u8cpLChg5qwnWbHi/XwPq/mLybM1zBt52UmcM2f54jpePjvfQ5AAJfZW2sH+xo47L8465rS/bfZBn6+xaJ2ziMRLIh7/U6/gLCLxEpOyhoKziMTLl+GCoIhIcxP6ErlsKTiLSLwocxYRCZCCs4hIgGJy+7aCs4jEit4hKCISopgE5/oefCQi0rykUtm3OphZsZm9aGYrzGy5mV19wP7rzMzNrHP02czsQTMrN7O3zezkjGMnmNnKqE3IZhrKnEUkXnKXOSeA69z9DTPrCLxuZgvcfYWZFQMjgY8yjj8X6B+1ocCvgKFmdhhwOzAY8Oh35rn7prpOrsxZROIl5dm3Orj7end/I9reBpTx2QPg7gduIB1s9xkDPOppC4FOZtYdGAUscPeqKCAvAEbXNw1lziISK57M/iYUMysBSjK6pkWPPD7wuN7AScBrZjYGqHT3t8z+5rlJPfns0coAFVFfbf11UnAWkXhpQFkj89nztTGzDsBvST/fPgHcTLqk0ahU1hCRWPGUZ93qY2YtSQfm2e7+v8DRQB/gLTP7kPQ7Vd8ws26kn3VfnPH1XlFfbf11UnAWkXjJUc3Z0jWL6UCZu08GcPdl7t7V3Xu7e2/SJYqT3X0DMA8YH63aGAZscff1wHxgpJkVmVkR6ax7fn3TUFlDROIld889OgO4BFhmZkujvpvdvbSW40uB84ByYCdwKYC7V5nZXcDi6Lg73b2qvpMrOItIrHgiN9HZ3f8C1PmmlCh73rftQI0vgXT3GcCMhpxfwVlE4iUeTwxVcBaReNGzNUREQqTMWUQkPMqcRURCpMxZRCQ8nsj3CHJDwVlEYsWVOYuIBEjBWUQkPMqcRUQCpOAsIhIgT9Z5x3WzoeAsIrGizFlEJECeUuYsIhIcZc4iIgFyV+YsIhIcZc4iIgFKabWGiEh4dEFQRCRACs4iIgHyeDzOWcFZROJFmbOISIC0lE5EJEBJrdYQEQmPMmcRkQCp5iwiEiCt1hARCVBcMueCfA9ARCSXkqmCrFt9zGyGmW00s3cy+gaZ2UIzW2pmS8xsSNRvZvagmZWb2dtmdnLGdyaY2cqoTchmHgrOIhIr7tm3LMwERh/Qdy9wh7sPAm6LPgOcC/SPWgnwKwAzOwy4HRgKDAFuN7Oi+k6s4CwisZJyy7rVx91fBqoO7AYOibYPBdZF22OARz1tIdDJzLoDo4AF7l7l7puABXw+4H+Oas4iEitNsJTuGmC+mf2CdIJ7etTfE1ibcVxF1Fdbf52UOYtIrDSkrGFmJVHdeF8ryeIUVwDXunsxcC0wvTHm0eiZc8fLZzf2KaQZ2rXulXwPQWIqm3LFPu4+DZjWwFNMAK6Otn8D/DrargSKM47rFfVVAsMP6H+pvpMocxaRWMnlao1arAO+Fm2fA6yMtucB46NVG8OALe6+HpgPjDSzouhC4Mior06qOYtIrOTyHhQzm0M66+1sZhWkV138EzDFzFoAu0mvzAAoBc4DyoGdwKUA7l5lZncBi6Pj7nT3Ay8yfo6Cs4jESkPKGvVx93G17DqlhmMdmFjL78wAZjTk3ArOIhIrevCRiEiAYvLybQVnEYkXR5mziEhwEipriIiER5mziEiAVHMWEQmQMmcRkQApcxYRCVBSmbOISHhi8pYqBWcRiZeUMmcRkfDE5OXbCs4iEi+6ICgiEqCUqawhIhKcZL4HkCMKziISK1qtISISIK3WEBEJkFZriIgESGUNEZEAaSmdiEiAksqcRUTCo8xZRCRACs4iIgGKySsEFZxFJF6UOYuIBEi3b4uIBEjrnEVEAhSXskZBvgcgIpJLqQa0+pjZDDPbaGbvZPTdZ2bvmtnbZva0mXXK2HeTmZWb2XtmNiqjf3TUV25mN2YzDwVnEYkVb0DLwkxg9AF9C4Dj3P0E4H3gJgAzGwhcBBwbfechMys0s0JgKnAuMBAYFx1bJwVnEYmVlGXf6uPuLwNVB/Q97+6J6ONCoFe0PQZ4wt33uPtqoBwYErVyd//A3fcCT0TH1knBWURiJdmAlgM/BH4fbfcE1mbsq4j6auuvk4KziMRKCs+6mVmJmS3JaCXZnsfMbgESwOzGmIdWa4hIrDRktYa7TwOmNfQcZvYD4FvACHffV76uBIozDusV9VFHf62UOYtIrOT4guDnmNlo4Abg2+6+M2PXPOAiM2ttZn2A/sAiYDHQ38z6mFkr0hcN59V3HmXOIhIruVznbGZzgOFAZzOrAG4nvTqjNbDA0m/6XujuP3b35WY2F1hButwx0d2T0e9cCcwHCoEZ7r68vnMrOItIrCQsdy+qcvdxNXRPr+P4ScCkGvpLgdKGnFvBWURiRe8QFBEJUFxu31ZwFpFYScUkd1ZwFpFYiUdoVnAWkZhRWUNEJEDJmOTOCs4iEivKnEVEAuTKnEVEwqPMWRpk1MjhTJ58J4UFBcx4ZA733jc130OSRrJnz14mTLyevdXVJBNJvnH2mVz5o0u45e5fsmTpMjq0bw/ApFv+lQFfORqARW+8zc+nPEwikaCo0yHMnHofAFu3bef2ex6g/IM1YMZdN1/LoOO+mre5NQdaSidZKygo4MEpkxh93jgqKtaz8NVSnn3uecrKVuZ7aNIIWrVqyYwH76Fdu7ZUJxKMv+InnDVsMADXTbyMkWef9TfHb922nbt/+Z88/Mu76d6tK59u2rx/3z0P/BdnDB3M/ZNupbq6ml279zTpXJqjeIRmPZWuSQw59SRWrfqQ1as/orq6mrlzn+Hb54+q/4vSLJkZ7dq1BSCRSJBIJIgekFOj0gUv8fWvnUH3bl0BOLwo/Uq6bdt38Ppb73Bh9GelZcuWHNKxQyOPvvlL4Fm3kH3h4Gxml+ZyIHHWo2c31las2/+5onI9PXp0y+OIpLElk0kunDCRv/vWOE479SROOHYAAA8+PIsLxl/Bz6c8zN69ewH48KMKtm7bzg+uvIGxP7yKZ37/RwAq122gqNOh3DppMt/9wURu+9kD7Ny1O29zai68AX+F7GAy5ztq25H5doFUasdBnEKkeSosLOS3s6bywtOPsWzF+6z84EOu+fGlPDvnv3ny11PYsnUb0//nNwAkkylWvLuSh+67k4cn383DM+fw4UcVJJJJyt4v5x8u+CZPzZxK27ZtmP7Y3DzPLHy5fPt2PtUZnKNXf9fUlgFH1PY9d5/m7oPdfXBBQfucD7q5WVe5geJePfZ/7tWzO+vWbcjjiKSpHNKxA0NOPoG/LFxCl86HYWa0atWK73xzJMvK3gfgiK6dOX3oKbRr24aiTodyyqDjeK98Nd26duaILp33Z90jh5/JivfL8zmdZuHLkjkfAYwHzq+hfdq4Q4uPxUuW0q9fH3r3LqZly5aMHTuGZ597Pt/DkkZStWkzW7dtB2D3nj28uvhN+hxVzF8/Sb/E2d3508v/R/++RwFw9lnDePPt5SQSSXbt3s2y5e/Rt3cxnQ8/jG5du7B6TQUAC19fytG9j8zPpJqRuGTO9a3WeA7o4O5LD9xhZi81yohiKJlMcvU1t1L6u8cpLChg5qwnWbHi/XwPSxrJXz/dxC13/4JkKoWnnFHnnMXwM4byw6tuZNPmLbg7x/Tvy+3XXwXA0b2P5Iyhg/n7CVdQYAVceP4o+vftDcDN117BT++4l+pENcU9unPXzdfmcWbNQ9LDzoizZd7IE2nRqmc8/klJTu1a90q+hyABatm5b+3LWrL0/aMuyDrmPL7m6YM+X2PROmcRiZXQa8nZUnAWkVgJvZacLQVnEYkV3b4tIhIglTVERAIUl9UaCs4iEisqa4iIBEgXBEVEAqSas4hIgFTWEBEJUGPf9dxU9LB9EYmVJJ51q4+ZdTKzp8zsXTMrM7PTzOwwM1tgZiujvxdFx5qZPWhm5dHTO08+mHkoOItIrKTwrFsWpgB/cPcBwIlAGXAj8IK79wdeiD4DnAv0j1oJ8KuDmYeCs4jEirtn3epiZocCfwdMj353r7tvBsYAs6LDZgHfibbHAI962kKgk5l1/6LzUHAWkVhpSOac+damqJVk/FQf4K/AI2b2ppn92szaA0e4+/romA189uKRnsDajO9XRH1fiC4IikisNGQpnbtPA6bVsrsFcDJwlbu/ZmZT+KyEse/7bmaNcgVSmbOIxErSPetWjwqgwt1fiz4/RTpYf7yvXBH9fWO0vxIozvh+r6jvC1FwFpFYydUFQXffAKw1s2OirhHACmAeMCHqmwA8E23PA8ZHqzaGAVsyyh8NprKGiMRKjm9CuQqYbWatgA+AS0kntXPN7DJgDTA2OrYUOA8oB3ZGx35hCs4iEiu5vAklen/q4Bp2jajhWAcm5urcCs4iEiu6fVtEJEB68JGISICSHo+Hhio4i0isxOXBRwrOIhIrqjmLiARINWcRkQClVNYQEQmPMmcRkQBptYaISIBU1hARCZDKGiIiAVLmLCISIGXOIiIBSnoy30PICQVnEYkV3b4tIhIg3b4tIhIgZc4iIgHSag0RkQBptYaISIB0+7aISIBUcxYRCZBqziIiAVLmLCISIK1zFhEJkDJnEZEAabWGiEiA4nJBsCDfAxARySV3z7rVx8xGm9l7ZlZuZjc2wfD3U3AWkVjxBvxVFzMrBKYC5wIDgXFmNrAJpgAoOItIzOQwcx4ClLv7B+6+F3gCGNPoE4io5iwisZLDmnNPYG3G5wpgaK5+vD6NHpwTeyutsc/RXJhZibtPy/c4JCz6c5FbDYk5ZlYClGR0TQvl34XKGk2rpP5D5EtIfy7yxN2nufvgjJYZmCuB4ozPvaK+JqHgLCJSs8VAfzPrY2atgIuAeU11ctWcRURq4O4JM7sSmA8UAjPcfXlTnV/BuWkFUcuS4OjPRaDcvRQozce5LS73oYuIxIlqziIiAVJwbiL5vA1UwmRmM8xso5m9k++xSHgUnJtAvm8DlWDNBEbnexASJgXnppHX20AlTO7+MlCV73FImBScm0ZNt4H2zNNYRKQZUHAWEQmQgnPTyOttoCLS/Cg4N4283gYqIs2PgnMTcPcEsO820DJgblPeBiphMrM5wKvAMWZWYWaX5XtMEg7dISgiEiBlziIiAVJwFhEJkIKziEiAFJxFRAKk4CwiEiAFZxGRACk4i4gESMFZRCRA/w+HCSsSBdql4AAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Testing with Test data\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "clf_RF_BoW = RandomForestClassifier(random_state=0,max_depth=500, n_estimators=70)\n",
    "clf_RF_BoW.fit(X_train_bow, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "train_fpr, train_tpr, thresholds = roc_curve(y_train, clf_RF_BoW.predict_proba(X_train_bow)[:,1])\n",
    "test_fpr, test_tpr, thresholds = roc_curve(y_test, clf_RF_BoW.predict_proba(X_test_bow)[:,1])\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\" hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.show()\n",
    "\n",
    "print(\"=\"*100)\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "print(\"Train confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_train, clf_RF_BoW.predict(X_train_bow))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Test confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_test, clf_RF_BoW.predict(X_test_bow))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## split data into train and test for tfidf "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Please write all the code with proper documentation\n",
    "X = preprocessed\n",
    "Y = final['label']\n",
    "# Please write all the code with proper documentation\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, shuffle=Flase)# this is for time series split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2) # this is random splitting\n",
    "#X_train, X_cv, y_train, y_cv = train_test_split(X_train, y_train, test_size=0.33) # this is random splitting\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "vectorizer = TfidfVectorizer(ngram_range=(1,2), min_df=10)#in scikit-learn\n",
    "vectorizer.fit(X_train) # fit has to happen only on train data\n",
    "\n",
    "# we use the fitted CountVectorizer to convert the text to vector\n",
    "X_train_TFIDF = vectorizer.transform(X_train)\n",
    "#X_cv_TFIDF = vectorizer.transform(X_cv)\n",
    "X_test_TFIDF = vectorizer.transform(X_test)\n",
    "      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NaiveBayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=MultinomialNB(alpha=1.0, class_prior=None,\n",
       "                                     fit_prior=True),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000,\n",
       "                                   10000]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import matplotlib.pyplot as plt\n",
    "#import GridSearchCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid ={\"alpha\" : [ 10**-4, 10**-3, 10**-2, 10**-1, 10**-0, 10**1, 10**2, 10**3, 10**4]}\n",
    "clf = MultinomialNB(class_prior=None)\n",
    "#clf = RandomForestClassifier(random_state=0)\n",
    "clf_cv_NB_tfidf= GridSearchCV(clf,param_grid,cv=5)\n",
    "clf_cv_NB_tfidf.fit(X_train_TFIDF,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'alpha': 0.0001}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_cv_NB_tfidf.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "best_alpha = 0.0001\n",
    "clf_nb_tfidf = MultinomialNB(alpha=best_alpha, class_prior=None)\n",
    "clf_nb_tfidf.fit(X_train_TFIDF, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "train_fpr, train_tpr, thresholds = roc_curve(y_train, clf_nb_tfidf.predict_proba(X_train_TFIDF)[:,1])\n",
    "test_fpr, test_tpr, thresholds = roc_curve(y_test, clf_nb_tfidf.predict_proba(X_test_TFIDF)[:,1])\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"alpha: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.show()\n",
    "\n",
    "print(\"=\"*100)\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "print(\"Train confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_train, clf_nb_tfidf.predict(X_train_TFIDF))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Test confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_test, clf_nb_tfidf.predict(X_test_TFIDF))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=LogisticRegression(C=1.0, class_weight=None, dual=False,\n",
       "                                          fit_intercept=True,\n",
       "                                          intercept_scaling=1, l1_ratio=None,\n",
       "                                          max_iter=100,\n",
       "                                          multi_class='multinomial',\n",
       "                                          n_jobs=None, penalty='l1',\n",
       "                                          random_state=0, solver='saga',\n",
       "                                          tol=0.0001, verbose=0,\n",
       "                                          warm_start=False),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'C': [1, 0.1, 0.01, 0.001, 0.0001]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import matplotlib.pyplot as plt\n",
    "#import GridSearchCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid ={\"C\" : [1, 0.1, 0.01, 0.001, 0.0001]}\n",
    "clf = LogisticRegression(penalty='l1', random_state=0, solver='saga',multi_class='multinomial')\n",
    "#clf = RandomForestClassifier(random_state=0)\n",
    "clf_cv_LR_tfidf= GridSearchCV(clf,param_grid,cv=5)\n",
    "clf_cv_LR_tfidf.fit(X_train_TFIDF,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 1}"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_cv_LR_tfidf.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Testing with Test data\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "best_C = 1\n",
    "clf_LR_tfidf = LogisticRegression(penalty='l2', C=best_C, random_state=0, solver='saga',multi_class='multinomial')\n",
    "clf_LR_tfidf.fit(X_train_TFIDF, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "train_fpr, train_tpr, thresholds = roc_curve(y_train, clf_LR_tfidf.predict_proba(X_train_TFIDF)[:,1])\n",
    "test_fpr, test_tpr, thresholds = roc_curve(y_test, clf_LR_tfidf.predict_proba(X_test_TFIDF)[:,1])\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"C: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.show()\n",
    "\n",
    "print(\"=\"*100)\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "print(\"Train confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_train, clf_LR_tfidf.predict(X_train_TFIDF))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Test confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_test, clf_LR_tfidf.predict(X_test_TFIDF))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=RandomForestClassifier(bootstrap=True, class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features='auto',\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              n_estimators='warn', n_jobs=None,\n",
       "                                              oob_score=False, random_state=0,\n",
       "                                              verbose=0, warm_start=False),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'max_depth': [10, 50, 100, 500, 1000, 1500, 10000],\n",
       "                         'n_estimators': [20, 40, 60, 70, 80, 90, 100]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "#import GridSearchCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = {'max_depth': [10, 50, 100, 500, 1000, 1500, 10000], 'n_estimators': [20, 40, 60, 70, 80, 90, 100]}\n",
    "clf = RandomForestClassifier(random_state=0)\n",
    "clf_cv_RF_tfidf= GridSearchCV(clf,param_grid,cv=5)\n",
    "clf_cv_RF_tfidf.fit(X_train_TFIDF,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_depth_list = list(clf_cv_RF_tfidf.cv_results_['param_max_depth'].data)\n",
    "estimators_list = list(clf_cv_RF_tfidf.cv_results_['param_n_estimators'].data)\n",
    "data = pd.DataFrame(data={'Estimators':estimators_list, 'Max Depth':max_depth_list, 'AUC':clf_cv_RF_tfidf.cv_results_['mean_test_score']})\n",
    "data = data.pivot(index='Estimators', columns='Max Depth', values='AUC')\n",
    "sns.heatmap(data, annot=True, cmap=\"YlGnBu\").set_title('AUC for Test data')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 100, 'n_estimators': 40}"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_cv_RF_tfidf.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Testing with Test data\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "clf_RF_tfidf = RandomForestClassifier(random_state=0,max_depth=100, n_estimators=40)\n",
    "clf_RF_tfidf.fit(X_train_TFIDF, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "train_fpr, train_tpr, thresholds = roc_curve(y_train, clf_RF_tfidf.predict_proba(X_train_TFIDF)[:,1])\n",
    "test_fpr, test_tpr, thresholds = roc_curve(y_test, clf_RF_tfidf.predict_proba(X_test_TFIDF)[:,1])\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"alpha: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.show()\n",
    "\n",
    "print(\"=\"*100)\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "print(\"Train confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_train, clf_RF_tfidf.predict(X_train_TFIDF))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Test confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_test, clf_RF_tfidf.predict(X_test_TFIDF))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying Random Forests on AVG W2V"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of words that occured minimum 5 times  505\n",
      "sample words  ['ok', 'mother', 'talking', 'given', 'coming', 'fact', 'absolutely', 'mom', 'gary', 'budget', 'perfect', 'solid', 'word', 'better', 'becoming', 'highly', 'experience', 'made', 'give', 'wanted', 'mind', 'dragged', 'two', 'scenes', 'opinion', 'pretty', 'often', 'turned', 'told', 'insanely', 'might', 'moving', 'not', 'knows', 'see', 'dialogue', 'recommended', 'seen', 'wotshisface', 'racism', 'oscar', 'work', 'keys', 'theater', 'loved', 'songs', 'read', 'begin', 'community', 'acne']\n"
     ]
    }
   ],
   "source": [
    "# https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, shuffle=Flase)# this is for time series split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2) # this is random splitting\n",
    "#X_train, X_cv, y_train, y_cv = train_test_split(X_train, y_train, test_size=0.33) # this is random splitting\n",
    "\n",
    "#Preparing Reviews for gensim model\n",
    "i=0\n",
    "list_of_sentance_train=[]\n",
    "for sentance in X_train:\n",
    "    list_of_sentance_train.append(sentance.split())\n",
    " #Training w2v model\n",
    "\n",
    "from gensim.models import Word2Vec\n",
    "from gensim.models import KeyedVectors\n",
    "\n",
    "# this line of code trains your w2v model on the give list of sentances\n",
    "w2v_model=Word2Vec(list_of_sentance_train,min_count=5,size=50, workers=4)\n",
    "\n",
    "w2v_words = list(w2v_model.wv.vocab)\n",
    "print(\"number of words that occured minimum 5 times \",len(w2v_words))\n",
    "print(\"sample words \", w2v_words[0:50])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 6430/6430 [00:00<00:00, 15826.07it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6430, 50)\n",
      "[ 4.31584986e-03  4.82470654e-02 -1.10908598e-03 -7.52001815e-03\n",
      " -1.00640301e-03 -9.97795686e-02 -3.07208318e-02 -1.02930270e-01\n",
      " -1.17968127e-01  1.62688885e-02  1.97248794e-02  9.66700315e-02\n",
      "  5.76948747e-02 -2.53514517e-02  1.04601741e-01  9.25860927e-02\n",
      " -5.42466491e-02  7.32812285e-02 -6.78649731e-03  2.09226385e-02\n",
      " -9.02480260e-02 -5.02421074e-02  4.78475774e-03  1.17753170e-01\n",
      "  1.23303406e-01  3.62860672e-02 -1.07852608e-01 -7.30782598e-02\n",
      "  1.18716873e-01  2.31619421e-02 -2.00667661e-02  1.13027997e-01\n",
      "  1.70237347e-02  2.52799392e-02  6.48770258e-02  1.17845029e-01\n",
      "  3.07397321e-02 -2.33457815e-02 -2.67884601e-02 -1.84447155e-03\n",
      "  1.36103434e-02  1.36160985e-01  4.43706736e-02  1.14947960e-01\n",
      " -1.07768318e-02 -1.20386267e-02 -2.87235808e-02  6.01061038e-05\n",
      "  1.30376086e-01 -1.23426318e-02]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "#Converting Reviews into Numerical Vectors using W2V vectors\n",
    "\n",
    "#Algorithm: Avg W2V\n",
    "\n",
    "from tqdm import tqdm\n",
    "import numpy as np\n",
    "\n",
    "#Converting Train data text\n",
    "\n",
    "# average Word2Vec\n",
    "# compute average word2vec for each review.\n",
    "sent_vectors_train = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sent in tqdm(list_of_sentance_train): # for each review/sentence\n",
    "    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n",
    "    cnt_words =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sent: # for each word in a review/sentence\n",
    "        if word in w2v_words:\n",
    "            vec = w2v_model.wv[word]\n",
    "            sent_vec += vec\n",
    "            cnt_words += 1\n",
    "    if cnt_words != 0:\n",
    "        sent_vec /= cnt_words\n",
    "    sent_vectors_train.append(sent_vec)\n",
    "sent_vectors_train = np.array(sent_vectors_train)\n",
    "print(sent_vectors_train.shape)\n",
    "print(sent_vectors_train[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1608/1608 [00:00<00:00, 14659.12it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1608, 50)\n",
      "[ 0.30674833  0.13991447  0.03827324  0.23929965  0.13574131 -0.22908914\n",
      " -0.51812851 -0.63726533  0.17094047 -0.19487083  0.08865481  0.74904361\n",
      "  0.09410995 -0.48561508  0.52406213  0.47606938 -0.24679037  0.05479717\n",
      "  0.03344516  0.1722329  -0.76238429 -0.02975634  0.26907431  0.90394043\n",
      "  0.97730556  0.43129858 -0.3363911  -0.16615126  0.56679229  0.18027803\n",
      "  0.46246117  0.62612372 -0.08286493  0.37897206  0.39206419  0.46528977\n",
      "  0.2052499  -0.34322818  0.38745052  0.10768376 -0.26053902  0.04791026\n",
      "  0.21844842  0.4488855  -0.15636532 -0.14415916 -0.12990334 -0.02839463\n",
      "  0.53074998 -0.10725935]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "#Converting Test data text\n",
    "i=0\n",
    "list_of_sentance_test=[]\n",
    "for sentance in X_test:\n",
    "    list_of_sentance_test.append(sentance.split())\n",
    "# average Word2Vec\n",
    "# compute average word2vec for each review.\n",
    "sent_vectors_test = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sent in tqdm(list_of_sentance_test): # for each review/sentence\n",
    "    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n",
    "    cnt_words =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sent: # for each word in a review/sentence\n",
    "        if word in w2v_words:\n",
    "            vec = w2v_model.wv[word]\n",
    "            sent_vec += vec\n",
    "            cnt_words += 1\n",
    "    if cnt_words != 0:\n",
    "        sent_vec /= cnt_words\n",
    "    sent_vectors_test.append(sent_vec)\n",
    "sent_vectors_test = np.array(sent_vectors_test)\n",
    "print(sent_vectors_test.shape)\n",
    "print(sent_vectors_test[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=RandomForestClassifier(bootstrap=True, class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features='auto',\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              n_estimators='warn', n_jobs=None,\n",
       "                                              oob_score=False, random_state=0,\n",
       "                                              verbose=0, warm_start=False),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'max_depth': [10, 50, 100, 500, 1000, 1500, 10000],\n",
       "                         'n_estimators': [20, 40, 60, 70, 80, 90, 100]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "#import GridSearchCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = {'max_depth': [10, 50, 100, 500, 1000, 1500, 10000], 'n_estimators': [20, 40, 60, 70, 80, 90, 100]}\n",
    "clf = RandomForestClassifier(random_state=0)\n",
    "clf_cv_RF_w2v= GridSearchCV(clf,param_grid,cv=5)\n",
    "clf_cv_RF_w2v.fit(sent_vectors_train,y_train)\n",
    "#clf = DecisionTreeClassifier(random_state=0,max_depth=None, min_samples_split=2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXgAAAEWCAYAAABsY4yMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzs3Xd8FHX+x/HXJyEgkJCQQmjS8agC0u9nQamKivVETsFTD/X09FTsdxZOTrF7ZzmxcHYRDhUFK6JYQEDp0kJvCZBAAiRgyH5+f8wk7uYgmcAu2Qyfp495sDvznZn3Lvjd2e989/sVVcUYY4z/xFR2AGOMMZFhFbwxxviUVfDGGONTVsEbY4xPWQVvjDE+ZRW8Mcb4lFXwJuxEJF1EZorIbhF5vLLzhIuIXCsiX1R2DmO8sgr+GCEiX4nIThGpcZD1V5da10dENgU9FxG5UUSWiMheEdkkIhNFpOMhTjcS2AHUUdVbjzD33SKyx132iUhR0POlR3DcQSKScSTZyjn+wyLyUqSOb4wXVsEfA0SkGXAKoMC5h3GIp4GbgBuBZOAE4H1g8CHKNwV+1sP4FZ2IVAt+rqr/UNV4VY0HrgVmFT9X1fYVPb4xxxKr4I8Nw4HZwH+AERXZUURaA9cDl6rql6q6X1XzVfVNVX34IOWLz3G7e5XdT0RqiMhTIrLFXZ4q/iZR/G1BRO4QkUxgfEVfnIh0EJEv3W8oy0TkvKBtQ0RkudtctNH9JpICvAe0CPo2kHKQ49YTkWkikicis3A+uIK3P+9mzxOROSLSy11/HnALMMI99hx3/TVBWTJE5MqKvlZjKsIq+GPDcOBNdxkoIukV2LcvsElV53gprKpXuOd5xL3K/gK4B+gFdAY6AT2AvwbtVh/nm0FTnOYdz0SkDvA58DKQivNaXxGRVm6RV4Dhqprgnv8bVc0GzgfWBH0byD7I4ccBOUA6cB1QukKeBXQEUoAPgIkiEqeq7wNPAK+6x+7hlt8KnAnUwfk28qyI2LcQEzFWwfuciJyMU3G+q6o/AquBYRU4RApOxXQkfg+MVtVtqrodeAC4PGh7ALjP/XZQUMFjnw8scb9RFKnqXOBD4EJ3exHQXkQSVDVbVed7OaiIHIfTnPVXVS1Q1QU4H1wlVPU1Vd2pqoXAP3DeqxaHOqaqTlHVter4AvgaOLmCr9cYz6yC978RwGequsN9/hahzTQHgLhS+8QBhe7jbKDBEWZoCKwPer7eXVdsu6ruO8xjNwVOFZFdxQtO5V6ceYj7fIPbjNPd43HrAwJsLJW7hIjcJSIrRCQX2Akch/Mt4qBE5Fy3KSfHzXlGWeWNOVLVyi9iqioRqQn8Doh127cBagBJItJJVRcCG4BmpXZtzq+V2XScpoRuqjrvMKNswamIi3u9NHHXFTuSIU034nyAnXOwjao6CzhbRKrjtIu/BbT2cM5Mt8zxwDp3XZPijSLSH/gz0A9YhvNhsNv9k9LHF5HawETgIuBjVT0gIp8ElTcm7OwK3t/Ow2miaIfT/twZaAt8g9NWDTAB+IOI9HC7Q54A3Ay8A6Cqq4DngLfdG6LVReQ4ERkqInd6zPE28FcRSRORVOBe4I0wvcb3gS4icomIxLn5eonICSJS281ZB+cbyW6c5iCALKCeiMQf7KDuN4oPgQdEpKaInIjT1FQswT3mdqA6MBrnCr5YFtBcRIor8Jo434y2AQERORfoc8Sv3pgyWAXvbyOA8aq6QVUzixfgGeD3IlJNVT8F7sTpvZILTANexbnBWOxGd59ngV047fjn41SAXjwIzAMWAYuBn9x1R0xVdwIDgT/g3CvY4h67uNnpSpxvI7k4H2rFH2wLgSnAerdpJ/kgh78G5wZrFvACoT18PgRm4rwXa3D6/W8P2v4OUAvIEZHv3SayUe5+2TgfvtMO+4Ub44HYhB/GGONPdgVvjDE+ZRW8Mcb4lFXwxhjjU1bBG2OMT0VxP/iVUXn3t367Cg+VYoyJsMyfHzri3xPUbHKp5zqnYMPbVeL3C3YFb4wxPhXFV/DGGHP0iPjvetcqeGOMAWLEf9Wh/16RMcYcBj9ewfvvFRljzGEQEc+Lh2MNckcazTjYmE0i0lREpovIInGmzWzsru8sIrNEZKm77ZKD7PtPEdnj5TVZBW+MMYBTHXpdDk1EYnHGbToTZ6C/S0WkXalijwGvqeqJOAPVPeSuz8eZoKY9MAh4SkSSgo7dDahbkVdkjDHHPJEYz0s5egAZqrpGVX/BGXhuSKky7YAv3cczirer6kp3BFdUdQvO6KNpTj6JBR4Fbvf6mqyCN8YYKlbBi8hIEZkXtARPNdmI0IliNrnrgi0ELnAfnw8klJ4XWER64AxFvdpddQMwRVU9z7BmN1mNMYaK9aJR1XGEDqldUaOAZ0TkCpxhpzfjzN0AgIg0AF4HRqhqQEQaAhdTwTkErII3xhjC2otmM85MYMUau+tKuM0vFzjnlXjgQlXd5T6vA0wF7lHV2e4uXYBWQIZ7k7eWiGSoaivKYBW8McYQ1gp+LtBaRJrjVOxDKTXRvTuzWY6qBoC7gFfc9dWB93BuwE4qLq+qU3HmCS7ef095lTv4oIKfOfNHxox5kUAgwMUX92fkyItDtm/evI27736anJw8kpLiefTRW6lf35nn+Kqr7mPhwhV07dqWF164L6y5Tj/5BP5+19nExsbw5qS5PPPS1yHbGzdM4skHLySlbm125RZw/R0T2JqVR/s2DRh773kkxNegqCjA0y/M4INPFvs+VzRns1z+yFUeCdP0uO58uzcAnwKxwCuqulRERgPzVHUKTlPLQyKiOE0017u7/w44FUhxm28ArlDVBYeTJYpndCp/sLGioiIGDryW8eP/Tnp6ChdddAtPPHEbrVqVzI3MjTc+zOmnd+f88/sya9ZCJk/+gkcfvRWAWbMWUlCwnwkTPvZcwXsZbCwmRvh+2q387uqX2ZqVxycTrue6295h5eptJWVefHIYn3+1nHc/+In/69mCoed34893vkuLpqkoytr12aSnJfDZpBs45ewnydu9z1O+qpgrmrNZrqqRKxyDjdVrc6vnynDb8sdtsLFIW7RoFU2bNuD44+tTvXocgwefyvTpP4SUWb16A716nQhAr14nhmzv3bsTtWvXDHuuLh2PZ+2GbDZs2klhYRHvf7yQgWe0DSlzQst6fPuDc3P8ux/WMMjdvmb9DtauzwYga/tudmTvJSW5tq9zRXM2y+WPXF7ExFTzvFQVEangRSRRRB4WkeUikiMi2SKyzF2XVP4RvMnKyi5pbgFIT08hKys7pEybNs357LNZAHz++Sz27i1g5868cEU4qAbpddiSmVvyfGtmHg3qJYaUWbp8K2f1aw/AWf3akxB/HHUTa4WU6dKxMXFxsazbkOPrXNGczXL5I5c34fmhUzSJVNJ3gZ1AH1VNVtUU4HR33buH2im4b+m4cRPCEuT2269k7twlnHfeTcyZs4T09BRiYyv/L+iBR6fRu3tzPv/vn+ndvTlbMnMpCgRKttdLTeBfD/+Ov9wziaPZjBatuaI5m+XyR64w/tApakTqu0YzVR0bvEJVM4GxInLloXYK7Vtafht8enoKmZk7Sp5nZWWTnp7yP2WeeeZuAPbuLeCzz76nTp14zy/kcGzNyqNh/V+vWhrUr8PWbbkhZbK27+aqm94EoFat6gzu36GkrTG+dg3e+PcIHn76M35atJFwidZc0ZzNcvkjlxdVqeL2KlKvaL2I3C4i6cUrRCRdRO4g9BdeR6Rjx9asW7eFjRsz+eWXQqZOnckZZ/QIKZOTk0vAvToYN24iF17YL1ynP6QFSzbRomkqTRrVJS4ulvPO7MRnM5aFlElOqlUyaNGNf+zDO5PnARAXF8v4f13GxA/m89FnS46JXNGczXL5I5cXQoznpaqI1BX8JcCdwNduJa9AFjAFpxtQWFSrFsu9917L1VffR1FRgAsv7Efr1k15+uk36NChNX379mTOnCU88cSriAjdurXnvvuuK9l/2LA7WLNmE/n5+zj11CsYM+ZGTjnlpCPOVVQU4O4xU3j7xSuJjRHefm8eKzK2cfsN/ViwdDOfzVjGb3u04O6bB6IKs+et5a6/fwDAuYM60qtrc+om1eKS850sN909iaXLPf86ucrliuZslssfubzw4xV8xLpJikgbnF9wzVbVPUHrB6nqJ+UfweZkNcZ4E45ukk06Pei5ztmw8K/HbjdJEbkR+ABncJwlIhI8kto/InFOY4w5EtZE490fga6qukdEmgGTRKSZqj4NYfq5mDHGhJEfm2giVcHHFDfLqOo6EemDU8k3xSp4Y0wU8mMFH6lXlCUinYufuJX92UAq0DFC5zTGmMNmTTTeDQcOBK9Q1QPAcBF5IULnNMaYwyZVaAgCryLyilR1UxnbvovEOY0x5kh4mUy7qvHfR5YxxhyGqtT04pVV8MYYgz9vsloFb4wxANZEY4wxPuW/C/joreBX5q6s7AgHVfPs/6vsCMaYSIjxXw0ftRW8McYcVf6r362CN8YYALU2eGOM8Sn/1e9WwRtjDAAx/qvhrYI3xhiwbpLGGONbsVbBG2OMP9kVvDHG+JT/6ner4I0xBrCbrMYY41v+q9+tgjfGGACN9d9PWat8Bf/jrOW8+Pj7BAIB+g/pycUj+oZs37Y1h6f/PoG8XXuJr1OLWx8YRmp6EmtWbua5h/9L/t59xMbG8Ls/9OWU/l3CluvUE9K4b0h7YkSYMGcD//5qdcj2Rkk1GXtxJ1Liq7Mrv5Cb35lPZu4+2jaow4MXdCS+RjUCqjzz5SqmLtzq+1zRnM1y+SNXuewKProUFQX49yOT+fsz15BSL5FbRjxFz1Pa06RF/ZIyrzz9IWec1Y2+Z3dn4dxVvPrcNG59YBg1alTnlvsvpWGTNLK353Lz8Cfp0qsN8Qk1jzhXjMDo8ztw+Ys/kJlbwAd/PoUvfs4iY9uekjJ3n92WyT9tYvKPm+jdMoXbB7XhlgkL2FdYxK0TFrBux17q1anBhzeewswV29m970AZZ6zauaI5m+XyRy5PwtiLRkQGAU8DscBLqvpwqe1NgVeANCAHuExVN7lzWT8P1AGKgDGqOsHd502gG1AIzAGuUdXCsnJU6e8kq5ZuoEHjFOo3SiEurhqnDujCDzOXhpTZsDaLE7u3AuDEbq34YeYSABo1TaNhkzQAUtISSawbT97OPYRDp+OTWL9jLxtz8iksUj5cuJn+7dNDyrSql8CsjB0AzFqdTT93+9ode1m3Yy8A2/L2k73nF1Lia/g6VzRns1z+yOVJjHhfyiAiscCzwJlAO+BSEWlXqthjwGuqeiIwGnjIXZ8PDFfV9sAg4CkRSXK3vQm0AToCNYGry31JXl53RYlINRG5RkQ+EZFF7vKxiFwrInHhOk/29lxS05NKnqfUSyR7e25ImeatGzJrxmIAZn21mIK9+8nbtTekzMqlGzhwoIj6jVPCkqt+Yk225u4reZ6Zu4/6dUK/GSzbmsfADg0AGNihPgnHxZFUK/St6XR8EnGxwvrs0Lx+yxXN2SyXP3J5IhVYytYDyFDVNar6C/AOMKRUmXbAl+7jGcXbVXWlqq5yH28BtuFc5aOq09SFcwXfuLwgkbqCfx3oDNwPnOUuDwCdgDcOtZOIjBSReSIyb8J/PglLkCtvOoclP63hpsseZ8lPa0ipl0hM0M2UnB15PHHfW9z0t6HEHMXxoP8x9Wd6tkjmo5tOoWeLFLbuKqAooCXb0xJq8MTQztw2cSGqZRzoGMkVzdkslz9yIeJ5Ca6r3GVk0JEaARuDnm9y1wVbCFzgPj4fSBCRkCtMEekBVAdWl1ofB1wOlFtJRqoNvquqnlBq3SZgtogcciYPVR0HjANYmftRuX+1KWmJ7MjaVfI8e1suKWmJ/1Pm7keuAKAgfz/fz1hU0s6ev2cfD9z8EpdfdyZtOjb18ro8ycwtoEHicSXP6yceR2ZeQUiZbXn7ue71HwGoVT2WQR3ql7Q1xteoxitX9uCxT1awYMMuwiVac0VzNsvlj1yeVGCoguC66jCNAp4RkSuAmcBmnDZ3AESkAc6F8ghVDZTa9zlgpqp+U95JInXJmiMiF0vQLLYiEiMilwA7w3WS1u2OZ8vGHWRuzqaw8AAzP5tPj1Pah5TJ3bWHQMB5fyb+Zzr9zukBQGHhAcbcPp4zzurG//XtFK5IACzalEuz1No0rluTuFjhnE6N+OLnrJAydWvFldzT+dPprZg4z/nAj4sV/j28G5N/3MTHi8PbgyBac0VzNsvlj1yeVOAKvhybgeODnjd215VQ1S2qeoGqdgHucdftcmJIHWAqcI+qzg6NKPfhNNnc4uUlReoKfigwFnhORHbitFol4rQ1DQ3XSWKrxXLtbRdw343jCASUfuf0oGnL+rzxwie0btuYnqd2YMmPq3n1uWkI0L5LC667/UIAvv1iIUvnr2F3bj7TP5oLwF/uG0qLE0p/k6q4ooBy3wdLee3qnsTECBPnbmRV1h5uHnACizfl8sXPWfRqmcptZ7YBVeaszeHe95ybv4NPbEiPFsnUrR3HRd2cJrZRExaybGueb3NFczbL5Y9cnoSvE81coLWINMep2IcCw0JOJZIK5LhX53fh9KhBRKoD7+HcgJ1Uap+rgYFA34Nc1R+UaIQbuYLalZ5W1cu87ueliaYyDBxT2QmMMaWtfeTsI66eW176luc6Z/Xbw8o8n4icBTyF003yFVUdIyKjgXmqOkVELsLpOaM4TTTXq+p+EbkMGA8Edwe8QlUXiMgBYD2w210/WVVHl5UjIlfwIjLlIKvPKF6vqudG4rzGGHPYwtgPXlWnAdNKrbs36PEkYNJB9nuDQ3REUdUK19eRaqJpDPwMvITzCSVAd+DxCJ3PGGOOjA9/yRqpm6zdgB9xbh7kqupXQIGqfq2qX0fonMYYc/hiY7wvVUREruDdGwBPishE98+sSJ3LGGPCwodX8BGtdFV1E3CxiAwGjtKtcGOMOQw2HvzhUdWpOP06jTEmOlkFb4wx/qT+q9+tgjfGGKBK3Tz1yip4Y4wBa6Ixxhjf8t8FfPRW8IWeRlo4+rR22IazN8ZEkzD+kjVaRG0Fb4wxR5U10RhjjD+pXcEbY4xPVbMK3hhj/Mmu4I0xxqesDd4YY3zKf/W7VfDGGAOgdgVvjDE+ZRW8Mcb4VKxV8MYY40/Wi8YYY3zKmmiiz0+zlvPKk+8TCATod25PLhjeN2T7tq05PDtmAnk79xJfpxY3PTCM1HpJrF25mRce+S8Fe/cRExPDhVf05eT+XcKW67SWqdw7qA2xMcKEnzbx/HdrQ7Y3SjyOR87tQHLt6uQWFPKXyYvI3L2fdukJPDi4HfE1qlGkyrPfrOGjpZm+zxXN2SyXP3KVyyr46FJUFODFxyZz3z+vIaVeIrf/4Sm6n9Ke45vXLynz6r8+pM+Z3Th9cHcWz1vFm89N46b7h1HjuOrceO+lNGySRs72XEZd8SRderWhdkLNI84VIzD6rLZc9vo8MvP2MeWPvfl8xTYyduwtKXN3/98wedEW/rtwC72bJXN73xO45f3FFBQWccv7i1mXk0+9+Bp8NLI3MzN2kLf/gG9zRXM2y+WPXF74caiCKj1AZsbPG2jQOIX6jVKIi6vGyf27MGfm0pAym9Zm0bFbKwA6dG3FnJlLAGjYJI2GTdIASE5LJLFuPLk794QlV+dGiazPyWfjrgIKA8qHS7cyoE29kDKt0+L5fm0OALPW5dDf3b42J591OfkAbNuzn+y9v5Bcu7qvc0VzNsvlj1yexIr3pYqISAUvIoki8rCILBeRHBHJFpFl7rqkcJ0ne3suKfV+PVxKvURytueGlGnWuiGzv1oMwA9fLaYgfz+7c/eGlFm1dAMHCouo3zglLLnSE45jS96+kudb8/aRnnBcSJllWbsZ1Nb5hz2wTT0SalQjqWboUMSdGiYSFyusd//R+zVXNGezXP7I5UmMeF+qiEhdwb8L7AT6qGqyqqYAp7vr3j3UTiIyUkTmici8if/5JCxBRvz5HJb+tIZbhz/O0vlrSE5LJCbm15edsyOPpx94ixv+NjRkfaSN+WwFPZsmM3Vkb3o1S2Zr3j4CAS3ZnhZfnSfO78htHyxByzjOsZIrmrNZLn/k8mMFH6k2+GaqOjZ4hapmAmNF5MpD7aSq44BxAEt3flTu321KWiLZ23aVPM/elktyWmJImeS0RO4YewUABfn7mTVjUUk7e/7efYy55SWGXXsmv+nQ1ONLK1/W7n00rPPrVUuDOseRtXtfSJlte/Zz7bsLAKgVF8ugtuklbY3x1WMZP6wrj325ivmbQ7+R+DFXNGezXP7I5UnVqbc9i9Ql63oRuV1E0otXiEi6iNwBbAzXSVq1PZ6tG3eQtSWbwsIDfPv5fLqf0j6kTN6uPQQCzvRQk1+dTt9zegBQWHiAsXeMp89Z3fjtGZ3CFQmAhZvzaJZSi8ZJNYmLEc5p34DPV2wLKVO3ZlzJv6c/ndKcd+dvBiAuRnjhki5MXriFj5dlHRO5ojmb5fJHLi80RjwvVUWkruAvAe4EvnYreQWygCnA78J1kthqsVw96gJG3zSOQEDpe3YPmrSoz9vjPqFlm8b0OLUDS35azZvPTQOBdp1bMPK2CwH4/ouF/Dx/Dbtz85kxdS4Af/7bUJqf0OiIcxWpcu+0Zbx2WVdiRXh3wWZWbd/LzX1asXhLLl+s3E6vZsnc3rc1CsxZv5N7p/0MwOD29enRtC51a8VxUeeGAIx6fwk/Z+32ba5ozma5/JHLEx/2ohHV8LdyiUhPYLmq5opILZzK/iRgKfAPVS33u5eXJprKMPifNierMdFm3X0Dj7h2bvLPrz3XORtuPK1KfBpEqonmFaC4q8pTQALwMJAPjI/QOY0x5rDFxHhfyiMig0RkhYhkiMidB9neVESmi8giEflKRBq76zuLyCwRWepuuyRon+Yi8oN7zAkiUm4f0khV8DGqWvzrhG6qerOqfquqDwAtInROY4w5bCLel7KPI7HAs8CZQDvgUhFpV6rYY8BrqnoiMBp4yF2fDwxX1fbAIOCpoK7lY4EnVbUVTo/Eq8p7TZGq4JeIyB/cxwtFpBuAiJwAFEbonMYYc9jCVcEDPYAMVV2jqr8A7wBDSpVpB3zpPp5RvF1VV6rqKvfxFmAbkCYiApwBTHL3eRU4r7wgnip4EblYRBLcx38VkckiclIZu1wNnCYiq90XMktE1gAvutuMMSaqiEhFlpLf7LjLyKBDNSK0t+Amd12whcAF7uPzgQQRCfmlpYj0AKoDq4EUYFdQy8jBjvk/vPai+ZuqThSRk4F+wKPA80DPgxV2b6JeISJ1gObueTap6tHv+2SMMR5U5HeOwb/ZOUyjgGdE5ApgJrAZKCreKCINgNeBEaoakMPs4eO1gi8+8WBgnKpOFZEHy9tJVfNwPqmMMSaqSfgarDcDxwc9b+yuK+E2v1wAICLxwIWqust9XgeYCtyjqrPdXbKBJBGp5l7F/88xD8brS9osIi/g9G+fJiI1KrCvMcZEvTC2wc8FWru9XqoDQ3F+AxR0LkkVKflIuQun5yFu+fdwbsAWt7ejTn/2GcBF7qoRwAflBfFaSf8O+BQY6H7KJAO3edzXGGOiXriGonGvsG/AqTOXAe+q6lIRGS0i57rF+gArRGQlkA6Mcdf/DjgVp4l7gbt0drfdAdwiIhk4bfIvl/eaym2icbv8/KSqbYJewFZga3n7GmNMVRHOH7Kq6jRgWql19wY9nsSvPWKCy7wBvHGIY67B6aHjWblX8KpahPNJ06QiBzbGmKokjE00UcPrTda6wFIRmcOvv1BFVc899C5H5ostR3Gg/wqotuAoTiFmjDlqYqrQRB5eee4mGdEUxhhTyarSlblXnip4VS0eFbK7u2qOqm4rax9jjKlK/FjBe/0l6++AOcDFOHd5fxCRi8reyxhjqo5juQ3+HqB78VW7iKQBX3CQu8DGGFMVVaF5PDzzWsHHlGqSycZ+6GSM8ZGqdGXuldcK/hMR+RR4231+CfBxZCIZY8zRd8z2olHV20TkAuBkd9U4VX0vcrGMMeboOmav4EVkrKreAUw+yDpjjKny/FjBe21H73+QdWeGM4gxxlSmY64XjYhcB/wJaCEii4I2JQDfRTKYMcYcTcdiL5q3cG6mPgQETxy7W1VzIpbKGGOOspjYyk4QfmVW8O7MTLnApQAiUg84DogXkXhV3RD5iGXb8NPPfPvKfwkEArTr15uTLhgQsn33thy+fPZNCvL2cFx8LfrdNJz41LrsWLuJr1+YwC8F+5CYGLpeOIDWJ3cNW65TuzTkr1d1JzZGePeLDF6YvCRke8O02jx8w29JrnMcuXv2c+tT35KZnU/bZnUZfW0v4mvGURRQnpu0mGnfrfN9rmjOZrn8kas8VanpxSuvN1nPAZ4AGuJMAtsUZ5zj9pGLVr5AUYCZL07knPuuJz4liUm3P0qz7h1JPr5BSZnvX32P3/TpQZvTe7Jp8Qpmv/kh/W4aTrUa1el74+UkNazH3pxcJo56hCZd2lKjdq0jzhUTI9w/sicj7v+czOx8Jj9yFtPnbCRjU25Jmbuu6Mp7X63mvRlr6NWxPqMu68Kop7+j4JcDjHr6W9Zv3U29ujV5/7HBfDN/M7vzj3yu8mjNFc3ZLJc/cnlxuNPiRTOvN1kfBHoBK1W1OdAXmF32LpG3LWM9iQ1SSayfSmxcNVqd3JW1cxaHlMnZlEmjjicA0KjDCSXbkxrWI6lhPQBqJydSMzGegtw9YcnVqXUK67fuZmPWHgoPBJj67Tr69Tg+pEyrxknMXuSMTDl7cWbJ9nVbdrN+627n9e0sIDt3H8mJx/k6VzRns1z+yOWFH2+yeq3gC1U1G4gRkRhVnQF0i2AuT/Zm7yI+pW7J8/iUJPbm7Aopk9qsEWtmO9PCrvlhIYUF+9i3e29ImaxV6yg6UERi/dSw5EpPrsXWHb+eIzM7n/SU0G8Gy9btZEBvZ4j9Ab2aEF+rOkkJNULKnNg6hbi4GDZk7vZ1rmjOZrn8kcuLY7mC3+VODDsTeFNEniZoXPjSRCRRRB4WkeUikiMi2SKyzF2XVMZ+I0VknojKa/pgAAAgAElEQVTM+37itEMVq5DfjjifLUtX8e6tY9myNIPayUlI0O3yvTm5TH/6dc644fdIRaZVP0IP/2cePdqnM+Xxs+nRPp3MHXspKgqUbE+rW5PHbjqZO//1PapHLVbU5ormbJbLH7n8WMF7HapgCLAPuBn4PZAIjC6j/LvAl0AfVc0EEJH6OBPFvgsMONhOqjoOGAfw9NLPyv2rrZ2SxJ7snSXP92TvonZy6OdH7eREzrzjjwAUFuxnzayFJe3sv+QXMHXMv+k57Gzq/6Z5eafzLCsnnwaptUue10+pRVZ2fkiZbTsLuH7s1wDUOq4ag3o1KWlrjK8Zx0v3nMETb85nwcodvs8Vzdkslz9yeVHNh6NreXpJqrrXnbqvFvAhzpyBZVXAzVR1bHHl7h4jU1XH4tygDYt6rZqQu3U7eVk7KCo8QMa3P9K8e8eQMgV5e9CAc3Xw4+TPaNu3FwBFhQf4eOxL/KZPD1r+tku4IgGwaFU2TRsk0LhePHHVYhh8cjOmz90YUqZuQo2SK4FrL+zAxC8zAIirFsNzd/bhva/W8Mms8HZSitZc0ZzNcvkjlxcxop6XqsJrL5prgAdwruIDgOBU8C0Osct6EbkdeFVVs9xjpANXABsPsU+FxcTGcsrVF/Ph6OfQgNKmby+SmzRgzttTSWvZhOY9OrJlySpmv/khAA3bteLUkRcDkPH9fLb+nMG+3XtZPuMHAPr++TJSmzc+4lxFAeWBF+cw/r5+xMYIE6dnsGpjLjdd2oklGdlMn7uJnh3SGXXZSSgwd2kW949zMpz1f03p3i6dpIQaXHBGSwDu+Od3LFu3s4wzVu1c0ZzNcvkjlxd+/KGTqIdGLhFZBfRWVU/fmUSkLs4Po4YA6TgfBlnAFGCslx9JeWmiqQz/+qvNyWpMtMl4b/gRV8+DP/vWc50zdcDJVeLjwGsb/Gogv9xSv7oceMYGIzPGVBVVqenFK68V/F3A9yLyA7C/eKWq3niI8n8H7hSR1TjDHUz0evVvjDGVwY9NNF4r+BdwesUsxmmDL88aoCvQD2dykNEi8iPOhCGTVfXodW41xhgPqh3DFXycqt5SgeOqqgaAz4DPRCQOZ3jhS4HHgLSKxTTGmMiSY7iJ5mMRGYnTRTK4ieZQN0tDPgtVtRDnBusUETnywV6MMSbMjuUmmkvdP+8KWldWN8lLDnUgVa3IzVpjjDkqfPg7J89zslboZ56quvLw4hhjTOU45nrRiMgZqvqlO+H2/1DVyQdbb4wxVY0fb7KW963kNPfPcw6ynB3BXMYYc1TFiPelPCIySERWiEiGiNx5kO1NRWS6iCwSka9EpHHQtk9EZJeIfFRqn74i8pOILBCRb0WkVXk5ypvR6T734WhVXVvqZOEbncsYYypZuJpoRCQWeBboD2wC5orIFFX9OajYY8BrqvqqiJyBMy3q5e62R3HG/bqm1KGfB4ao6jIR+RPwV5zhXw7J603W/wInlVo3Caeve0QkVY/O9jCtGVfZEYwxERDGXjQ9gAxVXQMgIu/gDNsSXMG3A4q7ns8A3i/eoKrTRaTPQY6rQB33cSKwpbwg5bXBt8GZli+xVDt8HZy5WY0xxhcq0ovG7TY+MmjVOHe4c4BGhA6quAnoWeoQC4ELgKeB84EEEUlxJ1Y6lKuBaSJSAOThzLJXpvKu4H+D09aehNPuXmw38MfyDm6MMVVFRZpogueuOEyjgGdE5AqciZQ2A0Xl7HMzcJaq/iAit+HMk311WTuU1wb/AfCBiPRW1VlekxtjTFUTxgk/NgPBE9E2dteVUNUtOFfwuLPlXaiqofONBhGRNKCTqv7grpoAfFJeEK8v6XwRqSMice6d3+0icpnHfY0xJurFVGApx1ygtYg0F5HqwFCcX/KXEJFUESk+1F3AK+UccydOU/kJ7vP+wDIvr8mLAaqah9Ncsw5oBdzmcV9jjIl64ZrRSVUPADcAn+JUwu+q6lIRGS0i57rF+gArRGQlzpwZY4r3F5FvgIlAXxHZJCID3WP+EfiviCzE6XFTbh3sebAx98/BOEP/5kpVmnnWGGPKEc6xaFR1GjCt1Lp7gx5PwumJeLB9TznE+veA9yqSw2sF/6GILAcKgOvc9qB9FTmRMcZEs2N5LJo7ReQRIFdVi0QkH6dfpzHG+IIfR5Ms80PLnTi7WF9VLQJQ1b3AoWZzMsaYKic2Rj0vVUV530qGBj2+q9S2QWHOYowxlSaMvWiiRnlNNHKIxwd7bowxVdYxN1wwztgHB3t8sOeVYvWPP/P5uMloIECnAb357cX9Q7bnbsvho6feIj9vDzXja3HuqMupk1qXrDWb+OTZd9lfsA+JieH/fjeAdqeWHm7n8J16YgP+NvwkYmOECTNW88KHoV1WG6bWYuzIniTXOY5de/Zz63OzyMwpoG3TJEZf2Z34mnEEAspz7y9l6uwNvs8Vzdkslz9ylcePbfDlVfCdRCQP52q9pvsY93mlj0UTKArw6fMTufTB66mTksT4mx+jdc8OpDVpUFJm+svv07Fvd07s25N1C1fy1asfcu6tw6lWozrn3HIZyY3qsTs7l1f+8igtTmrDcfFHPqNgjAj3/6ErIx6aQWZ2Ae89OIDpP20mY3NeSZm7ft+F975Zx+Rv1tK7XTqjLunEqOdnU7C/iNuen8W6zD3US6rJB2MGMnPRVnbnF/o2VzRns1z+yOUt+1E5zVFVZnOSqsaqah1VTVDVau7j4ueVPqzilpXrqdsgjbr1U4mNq0a7U09i1ezFIWV2bMyk2YnOj7+antiale72lEb1SG5UD4CElERqJ8aTn7snLLk6tUpmfdYeNm7bS2FRgI9mbaBf18YhZVo1SmTW0iwAZv2cVbJ9XeZu1mU6ObbtKiA7bx8pdWr4Olc0Z7Nc/sjlRZyo56WqiMj9AhGpJiLXuAPXL3KXj0XkWhEJ2wfD7uxd1ElLKnmekJrE7uzckDL1mjdi+fcLAVgxaxG/FOwnP29vSJktK9ZTdKCIug1Sw5IrvW4ttmb/OvVsZk4+6ck1Q8osX7+TgT2cf9gDujcmoVYcSfHVQ8qc2DKZuGoxrM8KzwdPtOaK5myWyx+5vAjnhB/RIlI3hF8HOgP3A2e5ywNAJ+CNQ+0kIiNFZJ6IzPvqnWmHKlYhfa88jw1LMnj5xrFsWJxBQkoiMUF/Q3tycpnyxOuc/ZdhSMzRuz/+0JsL6NGmHlP+MYiebeuxNTufosCvVwZpScfx+HW9ueOFH9CjeMEQrbmiOZvl8kcuP1bwXn/JWlFdVfWEUus2AbPdsRcOKngIzldXfVruX21CShJ5238dgG33jl0kpCSWKpPIRfc4I2r+UrCfFd8vKGln359fwIQHXuC0ywfTqE34JqjK2plPg5Rf2/LrJ9ciK6cgpMy2XQX86alvAahVoxoDux9f0tYYX7MaL912Go+/u4gFGWUND+2PXNGczXL5I5cXsVWo4vYqUpesOSJycdBoaYhIjIhcgjMqWlg0PKEJO7dsZ1dmNkWFB/h55k+07tkxpEx+7h40EADg+4mfc2J/Z4z8osIDTHrwZTqe0Z22J3cJVyQAFq3OoVn9BBqn1SYuNoazezdh+o+bQsrUTahO8XA+1w1px6Sv1wAQFxvD8zefwnvfrOOTORtLH9qXuaI5m+XyRy4v7Areu6HAWOBZESm+xE7CmZpq6CH3qqCY2FgGXHsR79z7HIFAgE79e5HWtAFfvzGVBq2bcELPjqxfvIqvXv0IETi+Q0sGXncxAMu+nc/GpRkU7N7Loi/mAHDOzb8nvUXjsk7pSVFAeeA/8/jPnX2IiREmfbWGVZvz+MtFHVm8JofpP22mZ9t0bhvaCVVlzvLt3D9+HgBn9WpC9zb1SIqvwYWnOt8qbn9hNsvWH3Ko6CqfK5qzWS5/5PLCj/3gRSPQyOWOgXwpzpyBP+H86vX/gKU4U1uV2+/JSxNNZRh9X05lRzDGlLL6rUuP+Lr6uZ8/81zn/KndgCpxHR+pK/jx7rFrArlAbZxhLvviTEg7IkLnNcaYw1KVml68ilQF31FVTxSRajhTVTV0R6F8A2eyWWOMiSp+bKKJVAUf4zbT1AZqAYlADlCDXycPMcaYqOHHXjSRquBfBpYDscA9wEQRWQP0At6J0DmNMeawWRONR6r6pIhMcB9vEZHXgH7Ai6o6JxLnNMaYI1GtKo0D7FGkruBR1S1Bj3dxiPkHjTEmGsRaG7wxxviTDy/grYI3xhiwNnhjjPEtq+CNMcanrA3+KEqqHqjsCAeV9f0nlR3BGPM/Lj3iI1gvGmOM8SlrojHGGJ+yX7IaY4xP2Vg0xhjjUz5sgrcK3hhjwJ9t8H780DLGmAqLi1HPS3lEZJCIrBCRDBG58yDbm4rIdBFZJCJfiUjjoG2fiMguEfmo1D4iImNEZKWILBORG8vLYRW8McYQvjlZRSQWeBY4E2gHXCoi7UoVewx4TVVPBEYDDwVtexS4/CCHvgI4Hmijqm3xMDKvVfDGGENYJ93uAWSo6hpV/QWnIh5Sqkw74Ev38Yzg7ao6Hdh9kONeB4xW1YBbblu5r6ncqMYYcwyIqcAiIiNFZF7QMjLoUI2AjUHPN7nrgi0ELnAfnw8kiEhKORFbApe45/tYRFqX95rsJqsxxgBSgZusqjoOGHcEpxsFPCMiVwAzcaY2LSpnnxrAPlXtJiIXAK8Ap5S1g1XwxhhDWHvRbMZpKy/W2F1Xwp0v4wIAEYkHLnTnzSjLJmCy+/g9YHx5Qap8Bb9i7jI+eH4yGlB6DOrF6UP7hWzfmZXDxMffZk/uHmol1GLoHZeTlJbEltWbmPzPiezP34/ECGdc2p/OfU4KW65+p3XkkXt/T2xsDK9O+Jonnp8asv34Rik8/8hVpCbXYWfuHq76ywtsydxJx3ZNeOrBEdSJr0lRUYBHn53Cfz8K3yRY0ZormrNZLn/kKk8Y26vnAq1FpDlOxT4UGBZcQERSgRy3Pf0unKvx8rwPnA6sBU4DVpa3g6hG56+3Plj/cbnBAkUBHrlyDH98+DoSU5P415+fYNhdw0lvWr+kzOt/H0/bnu3pNqAHGfNXMu+zOQy94zK2b9oGIqQ1SiM3O5d/Xv84o166k5rxtco85+9PK39K2ZgYYcGMRzj3skfYnJnDzCn384c/P8/yjJJJrnj92ev5+MsFvPXf7zitd1suu/gU/njLOFo1T0cVVq/Lon69JL796AG69ruL3Lz8cs9bVXNFczbLVTVy7Vn36hFff8/P/shzZdgl5ewyzyciZwFP4cxL/YqqjhGR0cA8VZ0iIhfh9JxRnCaa61V1v7vvN0AbIB7IBq5S1U9FJAl4E2gC7AGuVdWFZeWo0jdZN65YT2rDVFIapFItrhqdTuvC0u8Xh5TZtiGLVp2dexEtO7dm6Sxne1rjeqQ1SgMgMSWR+KR49uTuDUuubp1bsGZ9Fus2bqewsIhJH/7A4AGh3w7atG7E198vA+DrWcsY3N/ZnrE2i9XrsgDI3LaL7dl5pCYn+DpXNGezXP7I5YVUYCmPqk5T1RNUtaWqjnHX3auqU9zHk1S1tVvm6uLK3d12iqqmqWpNVW2sqp+663ep6mBV7aiqvcur3KGKV/C5O3JJTKtb8jwxLYm87NyQMg1aNGTJd4sAWPLdIvbn72dvXmhFvmH5eooKD5DSoLyb2N40TK/Lpi05Jc83b82hYXrdkDKLl21gyKCuAJw7sCt1EmqSnFQ7pEzXTi2oHleNNevL7Q1VpXNFczbL5Y9cXoh4X6qKiFTwIpIoIg+LyHIRyRGRbPeXVw+7XzMOtV9J16NP3/o4LFkGjxzCmkWreeq6R1mzaDWJqYnEBN1NycvO5Z1H3uDiUcOIiTl6n3d3j3mHk3u24bupozm5Vxs2b82hKPDrN8T0tERefGIk1972EkezGS1ac0VzNsvlj1zhvIKPFpG6yfouTif+PqqaCSAi9YER7rYBB9spuOuRlzb4xNREcrfvLHmeu30XdVISQ8ukJDL8visB2F+wnyXfLixpZ9+3dx+v/O1FBl0xmKZtm1XwJR7alqydNG6YXPK8UYNktmTtDCmTuW0Xw679FwC1a9VgyKBuJW2NCfHH8d/xtzD6sUnMnb/a97miOZvl8kcuL/w4XHCkLlmbqerY4sodQFUzVXUs0DRcJ2n8mybs2LyDnK3ZHCg8wMKv59Oud4eQMntz9xAIOLNDzXjnC7oN7AnAgcIDvPbAy3Tt140TT+0crkgA/LhwLS2bpdO0cSpxcbFcdE5Ppn0+P6RMSt14xP2uN+pPZ/P6uzMBiIuL5e0XbuStyd/x/sfzjolc0ZzNcvkjlxd+bKKJ1BX8ehG5HXhVVbMARCQdZyyFjWXtWBGxsbEMueFCXrr73wQCAboP7En9Zg349NVpND6hCe17d2D1wgw+fuUjRITmHVty/g0XAbDo6wWsWbyavXl7mfeZ0xXrktuG0bBl47JO6UlRUYBb732d91+7jdjYGF5/dybLVm3mrzefz0+L1zHti/mc0qsN999+Marw3ZwV3HLvawBcMLgn/9fjNyTXjeeyi04G4JpRL7H45w2+zRXN2SyXP3J5UYXqbc8i0k1SROoCdwLnAunu6ixgCjBWVXMOtW8xL000lcFLN0ljzNEVjm6Sy3d57ybZJqnsbpLRIiJX8Kq6U0TGATtwftFVBKwA3lLVvEic0xhjjoSNB++RO07x8zhjJ3QDquNU9LNFpE8kzmmMMUfCetF490egs6oWicgTwDRV7SMiLwAfAF0idF5jjDksNidrxY9dhHMVHw+gqhtEJC6C5zTGmMNSlXrHeBWpCv4lYK6I/IAznOVYABFJA8q9wWqMMUdblf5Z/yFE6ibr0yLyBdAWeFxVl7vrtwOnRuKcxhhzJOwKvgJUdSmwNFLHN8aYcPJh/V71x4M3xphw8GM3SavgjTEGq+CNMca3fFi/R28FXyO2shMcXFHgl8qOYIyJALF+8MYY4092BW+MMT5l3SSNMcanorRV+IhYBW+MMdgVvDHG+Jj/anir4I0xBhCr4I0xxp9E/DfcmFXwxhgDWBONMcb4lPhwwGCr4I0xBmuiMcYYH7MmmqizbM4yJj87mUBA6XVWL/pf2i9ke05WDm89+jZ7du2hdp1aXH7X5SSlJbEpYxMTn5rIvvz9SIww4Pf9Oen0k8KWq/9pnXjs/uHExsbwn3dm8NhzU0K2N2mUyr8fu4bU5Drs3LWHK296ls2ZOZzYrin/HHMlCQm1KCoK8Mgz7zHpw9m+zxXN2SyXP3KVx4+9aEQ1OgfY+WTTx+UGCxQFeHDEGP70yHUkpSXx+J+eYMQ9w6nfrH5JmfEPjKd9r/b0GNiDlfNX8sMnc7j8rsvYtnEbiFCvcRq5O3J57LrHuWv8ndSKr1XmOc//7WvlZo+JERZ//SSDf/8PNm/N5tsPxzDiz/9i+arNJWXefP4mpk2fz5uTZnLab9sz/HencdVfnqNV8/qowup1mTRIr8t3U8fQ5YxR5Obll3veqpormrNZrqqRq2DD20dcO+8p/NJzZRgfd0aZ5xORQcDTOD+QfUlVHy61vSnwClA8jellqrrJ3fYJ0Av4VlXPPsix/wlcqarx5eWs0o1O65evJ61RKqkNU6kWV42TTu/C4u8Xh5TJXJ9F6y6tAWjduXXJ9nrH16Ne4zQAElMTiU+KZ8+uvWHJ1b1zK1avy2Tdhm0UFhYx8cNZnD2gW0iZNq0b8/V3SwD4+vulnN2/KwAZazNZvS4TgK1ZO9m+I4/U5Dq+zhXN2SyXP3J5IRLreSn7OBILPAucCbQDLhWRdqWKPQa8pqonAqOBh4K2PQpcfohjdwPqen1NVbqCz92RS1Lar681KS2J3B25IWUatmzIwm8WAbDo20Xsz9/P3tzQinz98vUUHThAasOUsORqWL8um7ZklzzfvDWbRumhfyeLf17PkDN7ADBkUHfqJNQiOSn0A7lbp5ZUj6vGmvVZvs4Vzdkslz9yeSMVWMrUA8hQ1TWq+gvwDjCkVJl2wJfu4xnB21V1OrD7f9I5HxyPArd7fUURreBFJF1ETnKXdA/lR4rIPBGZN+3Nj8OS4bxrhrB60WoeueZRMhauJjE1EYn99S8oNzuXNx56g2G3DSMm5uh93t015k1O6dmWWdMe4pRebdm8NZuiQKBke/16Sbz81J+4ZtS/OZrNaNGaK5qzWS5/5JIK/FeORsDGoOeb3HXBFgIXuI/PBxJEpLwrzBuAKaq61eNLisxNVhHpDPwbSASKG98ai8gu4E+q+tPB9lPVccA48NYGn5iayK7tO0ue79q+i8TUxP8pc9UDVwKwv2A/C79ZWNLOvm/vPsbd/SKDrxxMs3bNKvQay7IlcyeNg74NNGqQwuasnSFltmbtZOg1TwJQu1YNzjuzR0lbY0J8TSaPv537H53AnPkZvs8Vzdkslz9yeeP9Ak9ERgIjg1aNc+svr0YBz4jIFcBMnHqyqIzzNQQuBvpU4BwRu4L/D3CTqrZV1X7u0gb4CzA+XCdp0qYJ2zfvIHtrNgcKD/DTjPl0+G2HkDJ7cvcQcK8OPn/rC3oN6gnAgcIDvHTfy3Qf0I3Op3UOVyQA5i1cTavm9Wl6fBpxcbFcfE5vpn7+Y0iZlLoJiDt83W3XD+HVCV8BEBcXy4QXb+Gtyd/w3rQ5x0SuaM5mufyRy4uKXMGr6jhV7Ra0BFfum4Hjg5435tcLXQBUdYuqXqCqXYB73HW7yojXBWgFZIjIOqCWiJT7CRipbpK1VfWH0itVdbaI1A7XSWJjY7nwzxfy/B3/JhAI0OvMnjRo1oBp46dx/G+a0PG3HchYkMGHL3+EILQ8sSUX33gRAPO/WsDqRavJz9vLnE+df0zDbh9G41aNjzhXUVGAm//2Hz58/S5iY2N4dcJXLFu5ib/dchE/LV7L1M9/5NTebRl9x1BU4dsflvGXvzmfexee3ZuTe7QhOSmeyy46FYCRt/6bRT+v922uaM5mufyRywsJ33jBc4HWItIcp2IfCgwrda5UIEdVA8BdOD1qDklVpwIl3QNFZI+qtiovSES6SbrdeFoCr/FrW9TxwHBgrareUN4xvDTRVAYv3SSNMUdXOLpJ7i+a47nOqRHbo7xukmcBT+F0k3xFVceIyGhgnqpOEZGLcHrOKE4TzfWqut/d9xugDRAPZANXqeqnpY6/x0s3yYj1gxeRM3HuDBffXNiMc4Ngmpf9rYI3xngVngp+bgUq+O5V4ldREfslq6p+DISnK4wxxkRYGJtookZEbrKKSKKIPCwiy0QkR0Sy3ccPi0hSJM5pjDFHJmz94KNGpHrRvAvsBE5X1WRVTQFOB3a524wxJqoIMZ6XqiJSSZup6lhVzSxeoaqZ7ngMTSN0TmOMOQJ2Be/VehG5PfjXq+6vWu8g9BdexhgTFWIkxvNSVUQq6SVACvC12wafA3wFJOP8GssYY6JMTAWWqiEivWhUdSdwh7uEEJE/EMZfsxpjTDj4cTz4yvgoeqASzmmMMeXwXxt8pAYbW3SoTUC5o0oaY8zR5sd+8JH6oVM6MBCnq2QwAb6P0DmNMeawCWVP5FEVRWosmpeB8ar67UG2vaWqww6yW8SIyMgKDuV51ERrNstVMdGaC6I3W7Tm8pOonZM1nERknqp2K7/k0Ret2SxXxURrLojebNGay0+qTn8fY4wxFWIVvDHG+NSxUsFHcztftGazXBUTrbkgerNFay7fOCba4I0x5lh0rFzBG2PMMccqeGOM8SnfVfAi8oqIbBORJUHrkkXkcxFZ5f5Zt5KyrRORxSKyQETmVWa2irxP4viniGSIyCIROSmCuTy/R5HOFa73SERGuOVXiciICOW6X0Q2u+/bAndO0OJtd7m5VojIwKD1g9x1GSJyZxizhO09EpGu7r+HDHdf//3cNJJU1VcLcCpwErAkaN0jwJ3u4zuBsZWUbR2QWmpdpWSryPsEnIUz/aIAvYAfouE9inSucLxHOCOornH/rOs+rhuBXPcDow5Sth2wEKgBNAdW40wEHes+bgFUd8u0i7b3CJjjlhV33zOPxv8ffll8dwWvqjOBnFKrhwCvuo9fBc47qqHKVinZKvg+DQFeU8dsIElEGhyNnJWZK0zv0UDgc1XNUWeU1c+BQRHIdShDgHdUdb+qrgUygB7ukqGqa1T1F+Adt2w4soTlPXK31VHV2erU9q8RXf/vRj3fVfCHkK6qW93HmVTegGcKfCYiP4rISHddtGQrK0sjQidq2eSui4SKvEdHM1eximY5mhlvcJs+Xglq6quMXOF6jxq5jyOR8ZgQqcHGopaqqohUVt/Qk1V1s4jUAz4XkeVRlC1EJWax9+jwPA/8HecD8u/A48CVlZqIqHuPjjnHyhV8VvFXd/fPbZURQlU3u39uA97D+ZocFdlch8qyGTg+qFxjd13YVfA9Omq5glQ0y1HJqKpZqlqkqgHgRZz3rbJyhes92uw+jkTGY8KxUsFPAYrvzI8APjjaAUSktogkFD8GBgBLoiFbkENlmQIMd3tB9AJyg76Ch81hvEdHJVcpFc3yKTBAROq6zSYD3HVhVerew/k471txrqEiUkNEmgOtcW5czgVai0hzEakODHXLhkNY3iN3W56I9HJ7zwyncv//qHoq+y5vuBfgbWArUIjTZncVzvyw04FVwBdAciXkaoHTU2EhsBS4x11fKdkq8j7h9GB4FqfXxWKgWzS8R5HOFa73CKepJMNd/hChXK+7512EU5E2CCp/j5trBUG9UHB6tax0t90Tje8R0A3nw2o18Azur+9t8bbYUAXGGONTx0oTjTHGHHOsgjfGGJ+yCt4YY3zKKnhjjPEpq+CNMcanrII3YSEiKiJvBD2vJiLbReSjMBy7j4jkish8d/TDmSJy9hEcr5mIDAt6foWIPHOkOY2JNlbBm3DZC3QQkZru8/6E91eH36hqF1X9DXAj8IyI9D3MY5Lt2+QAAAJzSURBVDUDhpVXyJiqzip4E07TgMHu40txfgQDgIj0EJFZ7lX49yLyG3f9zSLyivu4o4gsEZFaZZ1EVRcAo/+/vTt2ySqKwzj+fYLAoXKQFpcaEiJIFAqKECLaQwpcXaKGEvoDEkMoEUEKGoIooqWloYaIQAwiKIQiA4tao7lIsgZ7Gu6RrmJk8IZ4ez7wwuGcc8953xfe3z3c+97fAc6U47ZLuitpprwOlfoRSbfLvO8lnSxDjAF9qvKmnyt1nZIeln7jrfk6ItZXAny00h2qx+LbgG7gea3tLdBnuxcYBi6W+svALkn9wE3glO2va5jrBbC7Nsak7f3AceB6rV83cAQ4CAxL6qTKUf7Edo/tydKvBxgA9gIDkuq5USI2pP8um2T8O7ZnJe2kWr0/WNHcDtyS1EWV8XBzOeaHpEGqR+yv2X66xunqO/scBfbUNvvZJmlLKd+zvQAsSJqmSsL1aZXxpmx/BpA0B+xgeQrbiA0nAT5a7T4wARymykmyZBSYtt1fTgKPa21dwDzQ+Rfz9AJvSnkTcMD2t3qHEvBX5uL4XW6O77XyIvltRAPkEk202g3ggu3XK+rb+XXTdXCpUlI7cIVq67cOSSf+NIGkbuA8VeIqgEfA2Vp7T637MUltkjqoTjozwBdg69o/UsTGlAAfLWX7g+0rqzSNA5ckvWT56ngSuGr7HVUmwrGy2cdKfUt/k6QK7EO2p0rbELBP1W5Gc8Dp2nGzwDTwDBi1/bHULUp6VbvJGtE4ySYZjSVpBJi3PbHe7yViPWQFHxHRUFnBR0Q0VFbwERENlQAfEdFQCfAREQ2VAB8R0VAJ8BERDfUTeF1FrVSeKAgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_depth_list = list(clf_cv_RF_w2v.cv_results_['param_max_depth'].data)\n",
    "estimators_list = list(clf_cv_RF_w2v.cv_results_['param_n_estimators'].data)\n",
    "data = pd.DataFrame(data={'Estimators':estimators_list, 'Max Depth':max_depth_list, 'AUC':clf_cv_RF_w2v.cv_results_['mean_test_score']})\n",
    "data = data.pivot(index='Estimators', columns='Max Depth', values='AUC')\n",
    "sns.heatmap(data, annot=True, cmap=\"YlGnBu\").set_title('AUC for Test data')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 50, 'n_estimators': 100}"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_cv_RF_w2v.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Testing with Test data\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "clf_RF_w2v = RandomForestClassifier(random_state=0,max_depth=50, n_estimators=100)\n",
    "clf_RF_w2v.fit(sent_vectors_train, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "train_fpr, train_tpr, thresholds = roc_curve(y_train, clf_RF_w2v.predict_proba(sent_vectors_train)[:,1])\n",
    "test_fpr, test_tpr, thresholds = roc_curve(y_test, clf_RF_w2v.predict_proba(sent_vectors_test)[:,1])\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"C: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.show()\n",
    "\n",
    "print(\"=\"*100)\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "print(\"Train confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_train, clf_RF_w2v.predict(sent_vectors_train))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Test confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_test, clf_RF_w2v.predict(sent_vectors_test))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying Random Forests on TFIDF W2V "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, shuffle=Flase)# this is for time series split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33) # this is random splitting\n",
    "#X_train, X_cv, y_train, y_cv = train_test_split(X_train, y_train, test_size=0.33) # this is random splitting\n",
    "\n",
    "#Preparing Reviews for gensim model\n",
    "\n",
    " #Training w2v model\n",
    "\n",
    "from gensim.models import Word2Vec\n",
    "from gensim.models import KeyedVectors\n",
    "\n",
    "# this line of code trains your w2v model on the give list of sentances\n",
    "w2v_model=Word2Vec(list_of_sentance_train,min_count=5,size=50, workers=4)\n",
    "\n",
    "w2v_words = list(w2v_model.wv.vocab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 5385/5385 [00:01<00:00, 3625.09it/s]\n"
     ]
    }
   ],
   "source": [
    "#Converting Reviews into Numerical Vectors using W2V vectors\n",
    "\n",
    "i=0\n",
    "list_of_sentance_train=[]\n",
    "for sentance in X_train:\n",
    "    list_of_sentance_train.append(sentance.split())\n",
    "#Algorithm: ifidf W2V\n",
    "model = TfidfVectorizer()\n",
    "tf_idf_matrix = model.fit_transform(X_train)\n",
    "# we are converting a dictionary with word as a key, and the idf as a value\n",
    "dictionary = dict(zip(model.get_feature_names(), list(model.idf_)))\n",
    "\n",
    "from tqdm import tqdm\n",
    "import numpy as np\n",
    "\n",
    "#Converting Train data text\n",
    "\n",
    "# TF-IDF weighted Word2Vec\n",
    "tfidf_feat = model.get_feature_names() # tfidf words/col-names\n",
    "# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n",
    "\n",
    "sent_vectors_train = []; # the tfidf-w2v for each sentence/review is stored in this list\n",
    "row=0;\n",
    "for sent in tqdm(list_of_sentance_train): # for each review/sentence \n",
    "    sent_vec = np.zeros(50) # as word vectors are of zero length\n",
    "    weight_sum =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sent: # for each word in a review/sentence\n",
    "        if word in w2v_words and word in tfidf_feat:\n",
    "            vec = w2v_model.wv[word]\n",
    "#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n",
    "            # to reduce the computation we are \n",
    "            # dictionary[word] = idf value of word in whole courpus\n",
    "            # sent.count(word) = tf valeus of word in this review\n",
    "            tf_idf = dictionary[word]*(sent.count(word)/len(sent))\n",
    "            sent_vec += (vec * tf_idf)\n",
    "            weight_sum += tf_idf\n",
    "    if weight_sum != 0:\n",
    "        sent_vec /= weight_sum\n",
    "    sent_vectors_train.append(sent_vec)\n",
    "    row += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2653/2653 [00:00<00:00, 3505.63it/s]\n"
     ]
    }
   ],
   "source": [
    "i=0\n",
    "list_of_sentance_test=[]\n",
    "for sentance in X_test:\n",
    "    list_of_sentance_test.append(sentance.split())\n",
    "    \n",
    "#Converting Reviews into Numerical Vectors using W2V vectors\n",
    "\n",
    "\n",
    "#Algorithm: ifidf W2V\n",
    "model = TfidfVectorizer()\n",
    "tf_idf_matrix = model.fit_transform(X_train)\n",
    "# we are converting a dictionary with word as a key, and the idf as a value\n",
    "dictionary = dict(zip(model.get_feature_names(), list(model.idf_)))\n",
    "\n",
    "from tqdm import tqdm\n",
    "import numpy as np\n",
    "\n",
    "#Converting Train data text\n",
    "\n",
    "# TF-IDF weighted Word2Vec\n",
    "tfidf_feat = model.get_feature_names() # tfidf words/col-names\n",
    "# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n",
    "\n",
    "sent_vectors_test = []; # the tfidf-w2v for each sentence/review is stored in this list\n",
    "row=0;\n",
    "for sent in tqdm(list_of_sentance_test): # for each review/sentence \n",
    "    sent_vec = np.zeros(50) # as word vectors are of zero length\n",
    "    weight_sum =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sent: # for each word in a review/sentence\n",
    "        if word in w2v_words and word in tfidf_feat:\n",
    "            vec = w2v_model.wv[word]\n",
    "#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n",
    "            # to reduce the computation we are \n",
    "            # dictionary[word] = idf value of word in whole courpus\n",
    "            # sent.count(word) = tf valeus of word in this review\n",
    "            tf_idf = dictionary[word]*(sent.count(word)/len(sent))\n",
    "            sent_vec += (vec * tf_idf)\n",
    "            weight_sum += tf_idf\n",
    "    if weight_sum != 0:\n",
    "        sent_vec /= weight_sum\n",
    "    sent_vectors_test.append(sent_vec)\n",
    "    row += 1    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=RandomForestClassifier(bootstrap=True, class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features='auto',\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              n_estimators='warn', n_jobs=None,\n",
       "                                              oob_score=False, random_state=0,\n",
       "                                              verbose=0, warm_start=False),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'max_depth': [10, 50, 100, 500, 1000, 1500, 10000],\n",
       "                         'n_estimators': [20, 40, 60, 70, 80, 90, 100]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "#import GridSearchCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = {'max_depth': [10, 50, 100, 500, 1000, 1500, 10000], 'n_estimators': [20, 40, 60, 70, 80, 90, 100]}\n",
    "clf = RandomForestClassifier(random_state=0)\n",
    "clf_cv_RF_TfidfW2V= GridSearchCV(clf,param_grid,cv=5)\n",
    "clf_cv_RF_TfidfW2V.fit(sent_vectors_train,y_train)\n",
    "#clf = DecisionTreeClassifier(random_state=0,max_depth=None, min_samples_split=2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_depth_list = list(clf_cv_RF_TfidfW2V.cv_results_['param_max_depth'].data)\n",
    "estimators_list = list(clf_cv_RF_TfidfW2V.cv_results_['param_n_estimators'].data)\n",
    "data = pd.DataFrame(data={'Estimators':estimators_list, 'Max Depth':max_depth_list, 'AUC':clf_cv_RF_TfidfW2V.cv_results_['mean_test_score']})\n",
    "data = data.pivot(index='Estimators', columns='Max Depth', values='AUC')\n",
    "sns.heatmap(data, annot=True, cmap=\"YlGnBu\").set_title('AUC for Test data')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 50, 'n_estimators': 70}"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_cv_RF_TfidfW2V.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Testing with Test data\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "clf_RF_TfidfW2V = RandomForestClassifier(random_state=0,max_depth=50, n_estimators=70)\n",
    "clf_RF_TfidfW2V.fit(sent_vectors_train, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "train_fpr, train_tpr, thresholds = roc_curve(y_train, clf_RF_TfidfW2V.predict_proba(sent_vectors_train)[:,1])\n",
    "test_fpr, test_tpr, thresholds = roc_curve(y_test, clf_RF_TfidfW2V.predict_proba(sent_vectors_test)[:,1])\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"C: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.show()\n",
    "\n",
    "print(\"=\"*100)\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "print(\"Train confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_train, clf_RF_TfidfW2V.predict(sent_vectors_train))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test confusion matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Test confusion matrix\")\n",
    "uniform_data = confusion_matrix(y_test, clf_RF_TfidfW2V.predict(sent_vectors_test))\n",
    "ax = sns.heatmap(uniform_data,annot= True, fmt= \"d\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+---------------------+----------------+---------------------+---------+\n",
      "| Vectorizer |        Model        | hyperparameter | best hyperparameter |   AUC   |\n",
      "+------------+---------------------+----------------+---------------------+---------+\n",
      "|    BOW     |      NaiveBayes     |     alpha      |         0.1         | 0.99142 |\n",
      "|    BOW     | Logistic Regression |       C        |          1          | 0.99407 |\n",
      "|   TFIDF    |     Naive Bayes     |     alpha      |        0.0001       | 0.99205 |\n",
      "|   TFIDF    | Logistic Regression |       C        |          1          | 0.99474 |\n",
      "+------------+---------------------+----------------+---------------------+---------+\n",
      "+------------+----------------+-------+------------+---------+\n",
      "| Vectorizer | Random Forests | depth | estimators |   AUC   |\n",
      "+------------+----------------+-------+------------+---------+\n",
      "|    BOW     | Random Forests |  500  |     70     | 0.99546 |\n",
      "|   TFIDF    | Random Forests |  100  |     40     | 0.99417 |\n",
      "|    W2v     | Random Forests |  100  |     40     | 0.99317 |\n",
      "|  TFIDFW2v  | Random Forests |   50  |    100     | 0.98383 |\n",
      "+------------+----------------+-------+------------+---------+\n"
     ]
    }
   ],
   "source": [
    "from prettytable import PrettyTable\n",
    "    \n",
    "x = PrettyTable()\n",
    "y = PrettyTable()\n",
    "\n",
    "y.field_names = [\"Vectorizer\", \"Model\", \"hyperparameter\", \"best hyperparameter\", \"AUC\"]\n",
    "\n",
    "y.add_row([\"BOW\", \"NaiveBayes\", \"alpha\", 0.1, 0.99142])\n",
    "y.add_row([\"BOW\", \"Logistic Regression\", \"C\", 1, 0.99407])\n",
    "\n",
    "y.add_row([\"TFIDF\", \"Naive Bayes \", \"alpha\", 0.0001, 0.99205])\n",
    "y.add_row([\"TFIDF\", \"Logistic Regression\", \"C\", 1, 0.99474])\n",
    "\n",
    "print(y)\n",
    "\n",
    "x.field_names = [\"Vectorizer\", \"Random Forests\", \"depth\", \"estimators\", \"AUC\"]\n",
    "x.add_row([\"BOW\", \"Random Forests\", 500 ,70, 0.99546])\n",
    "x.add_row([\"TFIDF\", \"Random Forests\", 100, 40, 0.99417])\n",
    "x.add_row([\"W2v\", \"Random Forests\", 100,40, 0.99317])\n",
    "x.add_row([\"TFIDFW2v\", \"Random Forests\", 50,100 ,0.98383])\n",
    "print(x)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For Bow and Tfidf we get good AUC so by looking at confusion matrix, I am using Naive Bayes by BoW Vectorizer "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## applying model on text 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>I exchanged the sony ericson z500a for this an...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Oh and I forgot to also mention the weird colo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>\"Verizon tech support walked my through a few ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Better than you'd expect.,\\n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>This is a great little item.,\\n</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Text\n",
       "1  I exchanged the sony ericson z500a for this an...\n",
       "2  Oh and I forgot to also mention the weird colo...\n",
       "3  \"Verizon tech support walked my through a few ...\n",
       "4                       Better than you'd expect.,\\n\n",
       "5                    This is a great little item.,\\n"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "final_new1 = defaultdict(list)\n",
    "text1=[]\n",
    "f=open('3.txt')\n",
    "for line in f:\n",
    "    final_new1['Text'].append(line[4:])\n",
    "\n",
    "final_new =  pd.DataFrame(final_new1)\n",
    "final_new = final_new.iloc[1:]\n",
    "final_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 932/932 [00:00<00:00, 2818.19it/s]\n"
     ]
    }
   ],
   "source": [
    "# Combining all the above stundents \n",
    "from tqdm import tqdm\n",
    "preprocessed_new = []\n",
    "# tqdm is for printing the status bar\n",
    "for sentance in tqdm(final_new['Text'].values):\n",
    "    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n",
    "    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n",
    "    sentance = decontracted(sentance)\n",
    "    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n",
    "    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n",
    "    # https://gist.github.com/sebleier/554280\n",
    "    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stopwords)\n",
    "    preprocessed_new.append(sentance.strip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'not upload ringtones third party'"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preprocessed_new[100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "classification report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "     class 0       0.99      0.99      0.99      2819\n",
      "     class 1       0.99      0.99      0.99      3611\n",
      "\n",
      "    accuracy                           0.99      6430\n",
      "   macro avg       0.99      0.99      0.99      6430\n",
      "weighted avg       0.99      0.99      0.99      6430\n",
      "\n"
     ]
    }
   ],
   "source": [
    "X = preprocessed\n",
    "Y = final['label']\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2) \n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "vectorizer = CountVectorizer()\n",
    "vectorizer.fit(X_train) # fit has to happen only on train data\n",
    "\n",
    "X_train_final = vectorizer.transform(X_train)\n",
    "X_test_final  = vectorizer.transform(X_test)\n",
    "best_alpha = 0.1\n",
    "clf_final = MultinomialNB(alpha=best_alpha, class_prior=None)\n",
    "clf_final.fit(X_train_final, y_train)\n",
    "\n",
    "from sklearn.metrics import classification_report\n",
    "target_names = ['class 0', 'class 1']\n",
    "print(\"classification report\")\n",
    "print(classification_report(y_train, clf_final.predict(X_train_final), target_names=target_names))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_new_bow = vectorizer.transform(preprocessed_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "ynew = clf_final.predict(X_new_bow)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X=exchanged sony ericson pretty happy decision, Predicted=1\n",
      "X=I exchanged the sony ericson z500a for this and I'm pretty happy with that decision.,\n",
      ", Predicted=1\n"
     ]
    }
   ],
   "source": [
    "print(\"X=%s, Predicted=%s\" % (preprocessed_new[0], ynew[0]))\n",
    "print(\"X=%s, Predicted=%s\" % (final_new['Text'].values[0], ynew[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_new[\"Predicted\"] = ynew"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>Predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>I exchanged the sony ericson z500a for this an...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Oh and I forgot to also mention the weird colo...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>\"Verizon tech support walked my through a few ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Better than you'd expect.,\\n</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>This is a great little item.,\\n</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Text  Predicted\n",
       "1  I exchanged the sony ericson z500a for this an...          1\n",
       "2  Oh and I forgot to also mention the weird colo...          0\n",
       "3  \"Verizon tech support walked my through a few ...          0\n",
       "4                       Better than you'd expect.,\\n          0\n",
       "5                    This is a great little item.,\\n          1"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_new.to_csv(\"DigitMainfile.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
